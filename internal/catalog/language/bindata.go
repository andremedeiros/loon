// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/catalog/language/golang/1.13.12.json (190B)
// internal/catalog/language/golang/1.14.4.json (187B)
// internal/catalog/language/ruby/2.6.6.json (326B)
// internal/catalog/language/ruby/2.7.1.json (330B)

package language

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golang11312Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x4b\x8e\xc3\x20\x10\x04\xd0\x3d\xa7\x68\xb1\x1e\x81\xf9\xd8\x80\x2f\x63\xe1\x6e\x8c\x47\xf2\x0c\x11\x38\x59\x24\xf2\xdd\x23\xe7\xb3\xac\x2a\xbd\x7a\x30\x00\x9e\xcb\xa4\x26\x65\xf8\x08\x67\x04\xe0\xb7\x54\xdb\x6f\xf9\xe7\x23\x70\x25\x94\x11\x4a\xf3\x9f\xf7\x72\xad\xdb\xd9\xae\xfb\x7e\x69\xa3\x94\xb4\x89\x5c\x4a\xde\x92\xc0\xf2\x27\x73\x91\xb9\x7c\x80\x68\x15\xc5\x1e\xab\xc8\xf7\xaf\x6d\x6b\xd4\xfd\xf0\x3a\x75\x73\xd4\x68\x29\x59\x72\xde\x05\x13\xb5\x42\x1c\xfa\x40\x21\x74\x6e\xb1\xa6\x1f\x90\x02\x7a\x4a\x7e\x76\xd4\xf9\x10\x90\x12\x61\x5a\x9c\xd2\x69\x8e\xc6\x72\x06\x70\xb0\x83\x3d\x03\x00\x00\xff\xff\x7d\x6b\xa2\x20\xbe\x00\x00\x00")

func golang11312JsonBytes() ([]byte, error) {
	return bindataRead(
		_golang11312Json,
		"golang/1.13.12.json",
	)
}

func golang11312Json() (*asset, error) {
	bytes, err := golang11312JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.13.12.json", size: 190, mode: os.FileMode(0644), modTime: time.Unix(1592746161, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0xdb, 0x43, 0xaa, 0x90, 0x18, 0xbb, 0x19, 0xfb, 0x6, 0xea, 0x2e, 0xea, 0xe7, 0x9b, 0xea, 0x3d, 0x7b, 0xd, 0x72, 0x4c, 0x9f, 0x42, 0xc8, 0x77, 0x6, 0x8b, 0x59, 0xe2, 0xdb, 0x10, 0x9c}}
	return a, nil
}

var _golang1144Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x4b\xae\x83\x20\x14\x06\xe0\x39\xab\x38\x61\x7c\xc3\xcb\x83\x72\xdd\x0d\x2f\xb1\x09\xf5\x34\x60\x3b\x68\xe3\xde\x1b\x63\x3a\xfc\x1f\xdf\x87\x01\xf0\x42\xd5\x6f\x85\xcf\x70\x26\x00\xfe\xca\xad\xdf\x68\xe3\x33\x70\x2d\x34\x0a\xe4\x7f\xd7\xf0\x6c\xf5\x2c\xd7\x7d\x7f\xf4\x59\xca\x54\x45\x21\x2a\x35\x8b\x48\x77\x59\x48\x16\xba\xfe\xa2\xb7\x28\x76\xdf\x44\x79\xff\x68\x5f\xbd\xb1\xe3\xa9\x27\xa5\xb5\x5f\x86\x10\xa2\xf1\x51\x2b\x97\x74\x70\x26\x7b\xe7\x43\x70\x53\x30\x79\x1c\x96\xc9\x39\xc4\x45\x19\xfb\x1f\xb2\x51\x31\x65\x4c\x68\xa2\x8d\xa8\xac\x43\xce\x00\x0e\x76\xb0\x6f\x00\x00\x00\xff\xff\x59\x66\x5f\x02\xbb\x00\x00\x00")

func golang1144JsonBytes() ([]byte, error) {
	return bindataRead(
		_golang1144Json,
		"golang/1.14.4.json",
	)
}

func golang1144Json() (*asset, error) {
	bytes, err := golang1144JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.14.4.json", size: 187, mode: os.FileMode(0644), modTime: time.Unix(1592746161, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x8a, 0x5a, 0x5f, 0x17, 0x9f, 0xa7, 0x50, 0x56, 0xc, 0x95, 0xed, 0xb8, 0xeb, 0xa0, 0x89, 0xeb, 0xd6, 0x68, 0x36, 0x21, 0xae, 0x22, 0x7f, 0x67, 0x72, 0x94, 0x46, 0xab, 0xa0, 0x14, 0x50}}
	return a, nil
}

var _ruby266Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcd\xae\xab\x20\x14\x85\xe7\x3e\x05\x61\x7c\xcb\x9f\xba\x8d\xbe\x0d\x1b\xb6\x4a\x42\xd0\x80\x36\xb9\x3d\xe9\xbb\x9f\x60\xd3\x9e\x49\x67\x2b\x6b\x7d\x7c\x64\xff\x34\x8c\xf1\x7c\xe2\x7f\x3e\xb1\x9a\x19\xe3\x77\xca\x25\x6c\x89\x4f\x8c\x1b\x01\x02\xf8\xbf\x57\x7f\xe6\x58\xbb\xf5\x38\xf6\x32\x49\xe9\xac\x5b\x49\xd4\xa7\xb7\x68\xd3\x22\xb6\xbc\xc8\xfd\x44\x59\x1b\x69\x04\x5c\xe1\x76\x19\xc4\x61\xb3\x58\x1e\x6f\x51\x59\xad\xe9\xa1\xba\x5a\xe8\x50\x77\xad\xa7\xb9\x05\x85\xd6\x69\x1c\x3a\xc2\x1e\xc8\x83\x42\x6d\x95\x77\x16\xba\x76\x44\xa5\x74\x3f\x58\xd2\x7a\x9e\x87\xc1\xf7\xce\x1b\x1a\x8d\x19\x35\x6f\x18\x7b\x56\x2b\x0f\x6e\x4b\xf7\xbf\x1b\x42\x5a\x29\x87\xa3\xfe\x11\x03\xbe\xc6\x0f\xfb\x88\x01\xbf\xa2\xd7\xf0\xc1\xb6\x9d\x52\x29\xf1\x2b\xf9\xde\x2a\xdc\x3c\x9b\xdf\x00\x00\x00\xff\xff\xb9\xed\x56\xaa\x46\x01\x00\x00")

func ruby266JsonBytes() ([]byte, error) {
	return bindataRead(
		_ruby266Json,
		"ruby/2.6.6.json",
	)
}

func ruby266Json() (*asset, error) {
	bytes, err := ruby266JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.6.6.json", size: 326, mode: os.FileMode(0644), modTime: time.Unix(1592852687, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc3, 0xf7, 0x36, 0x81, 0x1f, 0x86, 0xf9, 0xc5, 0xdb, 0xac, 0x84, 0x64, 0x19, 0x66, 0x65, 0xf4, 0x54, 0xcf, 0x6b, 0x84, 0x1d, 0x53, 0xce, 0x2b, 0x8b, 0x65, 0x5f, 0xc, 0x99, 0xa4, 0xf5, 0x90}}
	return a, nil
}

var _ruby271Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x8e\xc3\x20\x0c\x45\xf7\x39\x05\x62\x3d\x05\xe3\x86\x90\xe9\x65\x2a\x9c\x58\x09\x12\x22\x11\x24\x95\xa6\xa3\xde\x7d\x44\xaa\x76\x36\xdd\xc1\xff\xcf\xcf\xf2\x6f\x23\x84\xcc\x3b\xfd\x5c\xf1\xea\xe4\x45\xd4\xbf\x10\xf2\xc6\xb9\x84\x25\xc9\x8b\x90\xa8\x9c\x32\xf2\xeb\x99\xef\x39\xd6\x6c\xde\xb6\xb5\x5c\xb4\x1e\xfc\x30\xb3\xaa\xe3\xa7\xe8\xd3\xa4\x96\x3c\xe9\x75\x27\x5d\x13\x8d\xca\x1d\x8f\xd3\x61\x50\x9b\xcf\x6a\xba\xbf\x44\x65\xf6\x68\xbb\xea\x1a\x5b\xd3\xb7\xfd\x99\xc6\x11\x00\xc0\xba\x6e\x30\x67\x07\xd6\x19\x83\xc6\x77\x4c\xd8\xda\x1e\x8d\xe9\x46\x02\x72\x44\x08\x60\xf9\x1b\x18\x2d\xb0\xe7\xd6\xf4\xb2\x11\xe2\x51\xad\x32\x0c\x4b\xba\xfd\xdf\x10\xd2\xcc\x39\x6c\x75\x47\x0c\xf4\x2c\xdf\xec\x3d\x06\xfa\x88\x1e\xc5\x1b\x5b\x56\x4e\xa5\xc4\x8f\xe4\xab\xab\x70\xf3\x68\xfe\x02\x00\x00\xff\xff\xf2\x3a\x4a\xf4\x4a\x01\x00\x00")

func ruby271JsonBytes() ([]byte, error) {
	return bindataRead(
		_ruby271Json,
		"ruby/2.7.1.json",
	)
}

func ruby271Json() (*asset, error) {
	bytes, err := ruby271JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.7.1.json", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1592852738, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x7, 0x12, 0x14, 0xc4, 0xeb, 0xc4, 0xb7, 0xb4, 0xe6, 0x1c, 0xc0, 0xe6, 0xe2, 0x14, 0x1f, 0x1f, 0xcc, 0xf, 0x63, 0xc1, 0x50, 0x27, 0xbd, 0x23, 0x9d, 0x59, 0xcb, 0x4d, 0xce, 0x82, 0x79}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang/1.13.12.json": golang11312Json,
	"golang/1.14.4.json":  golang1144Json,
	"ruby/2.6.6.json":     ruby266Json,
	"ruby/2.7.1.json":     ruby271Json,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"golang": &bintree{nil, map[string]*bintree{
		"1.13.12.json": &bintree{golang11312Json, map[string]*bintree{}},
		"1.14.4.json":  &bintree{golang1144Json, map[string]*bintree{}},
	}},
	"ruby": &bintree{nil, map[string]*bintree{
		"2.6.6.json": &bintree{ruby266Json, map[string]*bintree{}},
		"2.7.1.json": &bintree{ruby271Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
