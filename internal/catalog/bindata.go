// Code generated for package catalog by go-bindata DO NOT EDIT. (@generated)
// sources:
// internal/catalog/data/crystal/0.35.1.nix
// internal/catalog/data/crystal/default.nix
// internal/catalog/data/golang/1.13.12.nix
// internal/catalog/data/golang/1.14.4.nix
// internal/catalog/data/golang/default.nix
// internal/catalog/data/memcached/1.6.5.nix
// internal/catalog/data/memcached/1.6.6.nix
// internal/catalog/data/memcached/default.nix
// internal/catalog/data/mysql/8.0.17.nix
// internal/catalog/data/mysql/8.0.21.nix
// internal/catalog/data/mysql/default.nix
// internal/catalog/data/node/12.18.1.nix
// internal/catalog/data/node/12.18.2.nix
// internal/catalog/data/node/14.4.0.nix
// internal/catalog/data/node/14.5.0.nix
// internal/catalog/data/node/default.nix
// internal/catalog/data/postgresql/10.13.nix
// internal/catalog/data/postgresql/11.8.nix
// internal/catalog/data/postgresql/12.3.nix
// internal/catalog/data/postgresql/9.5.22.nix
// internal/catalog/data/postgresql/9.6.18.nix
// internal/catalog/data/postgresql/default.nix
// internal/catalog/data/redis/6.0.4.nix
// internal/catalog/data/redis/6.0.5.nix
// internal/catalog/data/redis/default.nix
// internal/catalog/data/ruby/2.6.6.nix
// internal/catalog/data/ruby/2.7.1.nix
// internal/catalog/data/ruby/default.nix
package catalog

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _crystal0351Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x8e\xa3\x30\x10\xbc\xe7\x2b\x5a\x6c\xa4\x9c\x0c\x36\xe6\x31\xde\x11\xa7\xd9\xff\x18\x35\x7e\x24\x28\x60\x90\xed\x64\x32\x8b\xf8\xf7\x15\x4e\xe6\x21\xed\x70\x6b\xb7\xca\x5d\x55\xdd\xaa\x5f\xf3\x0c\x4a\x9b\xce\x6a\x48\x94\x76\xdd\x15\x43\x37\xda\x04\x96\x65\xd7\x8f\xa3\x25\xd2\xbd\xfb\x80\x3d\xa1\xaf\xbc\x7c\x65\x04\x9d\x3c\x79\x68\x60\xde\x01\xdc\x9e\xaa\xd7\xaa\x20\x0a\xdd\x5b\x67\xa1\x81\xe4\x5e\x91\x7b\x3f\x79\xfe\x82\xf4\x9d\xbd\xdc\x60\x85\xc4\xea\x0b\xb1\x3c\xef\x7e\xa4\xf1\x27\xcc\xcb\x6a\x93\xa8\x56\x75\x69\x6a\x5a\x95\x54\x50\x6a\x50\x18\xa6\x8d\xe0\x79\x5d\x8b\x56\xe6\xdc\xd4\x02\x99\x10\x45\x5e\xcb\x22\x67\x22\xa7\x85\x41\xa1\xf3\x9c\x49\xce\x29\x32\x6c\xab\xff\xb5\x35\x90\x54\x92\x1b\xc5\x2b\x5a\xf3\x96\xe7\x82\xd6\x9c\xb2\x96\xa2\x40\x8d\x46\xd5\xf2\x49\x71\x2d\x5a\xd1\x62\xa5\x8b\xbc\x40\x2d\x58\x8b\x54\x96\x8c\x56\x2a\x52\x1a\xf1\xb0\xf3\x93\x1f\x68\xc0\x07\xa5\xed\x35\x1d\xce\x7f\x3e\x97\x0c\x4e\xcb\xe8\x6f\x5d\x2a\x34\xb0\xb9\xef\x74\x3f\x4f\xe7\xa3\x4f\x1f\x33\xfc\xbb\x0f\x7a\x58\xb9\x00\x26\x8b\x83\x5e\xd5\x3f\xfe\x45\x67\x57\xed\xfc\x3a\xbf\x81\x84\xa6\xbc\x4c\x59\xec\x7a\x27\xa1\x81\x38\xc8\xe8\x20\x4f\x17\xd7\x47\x76\x80\xb5\x6a\x20\x39\x85\x30\xf9\xdf\x59\x76\xec\xc2\xe9\xd2\xa6\x72\x1c\xb2\x0f\x35\x3d\xda\xe3\xc7\x23\x73\xba\xd7\xe8\xb5\xcf\xd4\xf8\x66\xfb\x11\x55\x76\x67\xf9\x44\xef\xe7\x87\x82\x85\x30\xb2\x9f\x57\x0f\x4b\x1a\xd0\xa5\xc7\xbf\x51\x09\xc0\xfd\xbe\x1b\x9e\x1f\xc7\xdf\x72\x0d\x70\xb7\xde\x5e\xba\x5e\xbd\x8c\xc3\x80\x56\x41\x03\x87\x43\x9c\x3c\x9c\x55\xe7\x80\x4c\xb0\x1f\x2f\x21\x76\x02\x3a\x20\xc4\x07\xd7\x4d\x44\x8e\xc3\x34\x5a\x6d\x83\x6f\x18\x90\x97\x08\x02\x72\x33\xb0\x9f\xbd\x93\xcb\x0e\xe0\x70\x88\x67\x5c\x63\xa1\xad\x5a\x63\xb0\xfb\x1e\x91\x09\xe5\x19\x8f\xda\x6f\x05\xe4\xfb\xc7\x7f\x01\x00\x00\xff\xff\x44\x9b\xf5\x5f\x5b\x03\x00\x00")

func crystal0351NixBytes() ([]byte, error) {
	return bindataRead(
		_crystal0351Nix,
		"crystal/0.35.1.nix",
	)
}

func crystal0351Nix() (*asset, error) {
	bytes, err := crystal0351NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crystal/0.35.1.nix", size: 859, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _crystalDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xcb\x8e\xa3\x30\x10\xbc\xe7\x2b\x5a\x6c\xa4\x9c\x0c\x36\xe6\x31\xde\x11\xa7\xd9\xff\x18\x35\x7e\x24\x28\x60\x90\xed\x64\x32\x8b\xf8\xf7\x15\x4e\xe6\x21\xed\x70\x6b\xb7\xca\x5d\x55\xdd\xaa\x5f\xf3\x0c\x4a\x9b\xce\x6a\x48\x94\x76\xdd\x15\x43\x37\xda\x04\x96\x65\xd7\x8f\xa3\x25\xd2\xbd\xfb\x80\x3d\xa1\xaf\xbc\x7c\x65\x04\x9d\x3c\x79\x68\x60\xde\x01\xdc\x9e\xaa\xd7\xaa\x20\x0a\xdd\x5b\x67\xa1\x81\xe4\x5e\x91\x7b\x3f\x79\xfe\x82\xf4\x9d\xbd\xdc\x60\x85\xc4\xea\x0b\xb1\x3c\xef\x7e\xa4\xf1\x27\xcc\xcb\x6a\x93\xa8\x56\x75\x69\x6a\x5a\x95\x54\x50\x6a\x50\x18\xa6\x8d\xe0\x79\x5d\x8b\x56\xe6\xdc\xd4\x02\x99\x10\x45\x5e\xcb\x22\x67\x22\xa7\x85\x41\xa1\xf3\x9c\x49\xce\x29\x32\x6c\xab\xff\xb5\x35\x90\x54\x92\x1b\xc5\x2b\x5a\xf3\x96\xe7\x82\xd6\x9c\xb2\x96\xa2\x40\x8d\x46\xd5\xf2\x49\x71\x2d\x5a\xd1\x62\xa5\x8b\xbc\x40\x2d\x58\x8b\x54\x96\x8c\x56\x2a\x52\x1a\xf1\xb0\xf3\x93\x1f\x68\xc0\x07\xa5\xed\x35\x1d\xce\x7f\x3e\x97\x0c\x4e\xcb\xe8\x6f\x5d\x2a\x34\xb0\xb9\xef\x74\x3f\x4f\xe7\xa3\x4f\x1f\x33\xfc\xbb\x0f\x7a\x58\xb9\x00\x26\x8b\x83\x5e\xd5\x3f\xfe\x45\x67\x57\xed\xfc\x3a\xbf\x81\x84\xa6\xbc\x4c\x59\xec\x7a\x27\xa1\x81\x38\xc8\xe8\x20\x4f\x17\xd7\x47\x76\x80\xb5\x6a\x20\x39\x85\x30\xf9\xdf\x59\x76\xec\xc2\xe9\xd2\xa6\x72\x1c\xb2\x0f\x35\x3d\xda\xe3\xc7\x23\x73\xba\xd7\xe8\xb5\xcf\xd4\xf8\x66\xfb\x11\x55\x76\x67\xf9\x44\xef\xe7\x87\x82\x85\x30\xb2\x9f\x57\x0f\x4b\x1a\xd0\xa5\xc7\xbf\x51\x09\xc0\xfd\xbe\x1b\x9e\x1f\xc7\xdf\x72\x0d\x70\xb7\xde\x5e\xba\x5e\xbd\x8c\xc3\x80\x56\x41\x03\x87\x43\x9c\x3c\x9c\x55\xe7\x80\x4c\xb0\x1f\x2f\x21\x76\x02\x3a\x20\xc4\x07\xd7\x4d\x44\x8e\xc3\x34\x5a\x6d\x83\x6f\x18\x90\x97\x08\x02\x72\x33\xb0\x9f\xbd\x93\xcb\x0e\xe0\x70\x88\x67\x5c\x63\xa1\xad\x5a\x63\xb0\xfb\x1e\x91\x09\xe5\x19\x8f\xda\x6f\x05\xe4\xfb\xc7\x7f\x01\x00\x00\xff\xff\x44\x9b\xf5\x5f\x5b\x03\x00\x00")

func crystalDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_crystalDefaultNix,
		"crystal/default.nix",
	)
}

func crystalDefaultNix() (*asset, error) {
	bytes, err := crystalDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "crystal/default.nix", size: 859, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golang11312Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\xe1\xb7\xbc\x0e\x91\x23\xd9\x89\xac\x04\x19\xfa\x25\x81\x42\xd2\x8a\x11\xd7\x0c\x24\x35\x43\x03\xff\x7b\x61\xa3\x05\x32\x74\x21\x08\x82\xf7\x5c\xe0\xfc\x7b\x3e\x81\xb8\x1f\x26\x86\x8a\x38\x0d\x8f\x50\x06\x99\x2a\x98\x67\x35\x8a\x4c\x9b\x28\x1b\x73\x36\xcd\xd9\x58\x38\xc1\xfd\x16\xb3\x8e\x72\x5e\x2e\x5a\x1e\x9c\xd2\x40\xfc\x5e\x4a\xca\xff\xc3\x32\x0f\xf0\x54\x00\x0f\x4e\x79\x90\x09\x4e\x50\x19\x6d\x1a\x6d\x6c\x75\x54\x00\x39\xe1\x2f\xa2\xe7\x82\xd7\xcf\x34\xae\xef\x00\xcb\x76\x82\xea\x5a\xca\x3d\x1f\xea\x9a\x46\x1d\x45\xe2\xc8\x1a\xe5\xa3\x8e\x52\x47\xf9\xe1\xe8\x9c\x50\x97\x90\x74\xfc\x5a\x91\x00\xf9\x1a\xec\x6e\xbf\x56\xb9\x4b\xb0\xd8\x12\xb7\xe4\x3a\xe7\x9b\x60\x0d\xe2\x7e\xe7\xc9\xfb\xad\xeb\xdb\x66\xb7\x47\xf2\xd8\x11\x77\x17\x47\xdb\xce\x7b\x24\x26\xe4\xde\x19\xcb\x97\xd0\xb4\x2b\x70\x3e\xaa\xf9\xed\xa8\x16\x29\x3c\xd1\x22\x41\xbd\x0a\xba\x07\xbc\x85\xc8\xf9\x2f\x3d\xaf\xa1\xef\x00\x00\x00\xff\xff\xc0\xc1\xf2\xbc\x55\x01\x00\x00")

func golang11312NixBytes() ([]byte, error) {
	return bindataRead(
		_golang11312Nix,
		"golang/1.13.12.nix",
	)
}

func golang11312Nix() (*asset, error) {
	bytes, err := golang11312NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.13.12.nix", size: 341, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golang1144Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xab\x30\x10\x85\xf7\x7e\x8a\x11\x77\x73\xbb\x88\xc1\x8e\x09\x6e\x10\x8b\x3e\x49\xe4\x9f\xc1\xa0\x50\x06\xd9\x2e\x8b\x22\xde\xbd\x22\x51\xa5\x2c\xba\x19\xcd\x62\xbe\xa3\x39\xdf\xbf\x6d\x03\x8f\xfd\x38\x23\x14\x1e\xe3\xb8\x9a\x3c\xd2\x5c\xc0\xbe\xb3\x89\x68\x3e\x05\x3a\x89\x9b\x50\x37\x05\x1d\x2c\xf7\x90\x78\x20\x4e\x2b\xc6\x38\x7a\xfc\xc8\x39\xa6\xff\xe6\x98\x57\xd8\x18\xc0\x8a\x31\x8d\x34\x43\x07\x85\xe0\x42\x71\x55\xb4\x0c\x20\x45\xf7\x0b\xf7\x98\xdd\xf0\x15\xa7\xc7\x35\xc0\xb1\x75\x50\x0c\x39\x2f\xe9\x5a\x96\x7e\xe2\x81\x28\x4c\xc8\x1d\x7d\x96\x81\xca\x40\xcf\x18\x9e\xa2\xe3\xd9\x44\x1e\xbe\x1f\x89\x00\x69\x30\xb2\xbe\x1c\x70\x53\x09\x61\xfa\xb3\xb5\x4e\x1a\x27\x2a\xed\x85\xd5\x12\x8d\x36\xd6\xea\xc6\x4a\xbc\x9c\xfb\x46\x6b\xa5\xfa\x4a\xd6\xef\x16\x65\xe5\x3c\x2a\xaf\xa4\xab\x9d\xaa\x6a\xfd\x7c\x71\x6f\xd9\xfe\xd6\xb2\x43\x06\xce\xfe\x28\xcf\x5e\xc5\x2c\xc6\xdd\x4d\xc0\xf4\x87\x96\x57\xe6\x27\x00\x00\xff\xff\xb6\x96\x75\x5f\x4c\x01\x00\x00")

func golang1144NixBytes() ([]byte, error) {
	return bindataRead(
		_golang1144Nix,
		"golang/1.14.4.nix",
	)
}

func golang1144Nix() (*asset, error) {
	bytes, err := golang1144NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.14.4.nix", size: 332, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _golangDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xab\x30\x10\x85\xf7\x7e\x8a\x11\x77\x73\xbb\x88\xc1\x8e\x09\x6e\x10\x8b\x3e\x49\xe4\x9f\xc1\xa0\x50\x06\xd9\x2e\x8b\x22\xde\xbd\x22\x51\xa5\x2c\xba\x19\xcd\x62\xbe\xa3\x39\xdf\xbf\x6d\x03\x8f\xfd\x38\x23\x14\x1e\xe3\xb8\x9a\x3c\xd2\x5c\xc0\xbe\xb3\x89\x68\x3e\x05\x3a\x89\x9b\x50\x37\x05\x1d\x2c\xf7\x90\x78\x20\x4e\x2b\xc6\x38\x7a\xfc\xc8\x39\xa6\xff\xe6\x98\x57\xd8\x18\xc0\x8a\x31\x8d\x34\x43\x07\x85\xe0\x42\x71\x55\xb4\x0c\x20\x45\xf7\x0b\xf7\x98\xdd\xf0\x15\xa7\xc7\x35\xc0\xb1\x75\x50\x0c\x39\x2f\xe9\x5a\x96\x7e\xe2\x81\x28\x4c\xc8\x1d\x7d\x96\x81\xca\x40\xcf\x18\x9e\xa2\xe3\xd9\x44\x1e\xbe\x1f\x89\x00\x69\x30\xb2\xbe\x1c\x70\x53\x09\x61\xfa\xb3\xb5\x4e\x1a\x27\x2a\xed\x85\xd5\x12\x8d\x36\xd6\xea\xc6\x4a\xbc\x9c\xfb\x46\x6b\xa5\xfa\x4a\xd6\xef\x16\x65\xe5\x3c\x2a\xaf\xa4\xab\x9d\xaa\x6a\xfd\x7c\x71\x6f\xd9\xfe\xd6\xb2\x43\x06\xce\xfe\x28\xcf\x5e\xc5\x2c\xc6\xdd\x4d\xc0\xf4\x87\x96\x57\xe6\x27\x00\x00\xff\xff\xb6\x96\x75\x5f\x4c\x01\x00\x00")

func golangDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_golangDefaultNix,
		"golang/default.nix",
	)
}

func golangDefaultNix() (*asset, error) {
	bytes, err := golangDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/default.nix", size: 332, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _memcached165Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6e\xac\x30\x0c\x86\xf7\x39\x85\xc5\xdb\xbc\x2e\x26\x90\xa1\x84\xcc\x20\x16\x3d\xc9\x28\x71\x1c\x88\x86\x01\x94\xa4\x2c\x8a\xb8\x7b\x05\x52\x2b\x36\xdd\x58\x96\x65\x7f\xbf\xf5\xfd\x5b\x57\xb0\xe4\xfc\x48\x90\x59\x0a\x7e\xd1\xc9\x4f\x63\x06\xdb\xc6\x86\x69\x1a\x2f\x2f\x7a\xa1\xc6\x9e\xec\x45\x3c\xe4\xa3\x82\x16\xe6\x67\x17\xf9\xef\x98\x4f\x0b\x85\xe0\x2d\x7d\xa4\x14\xe2\x7f\xbd\xd7\x3b\xac\x0c\x60\xa1\x10\xfd\x34\x42\x0b\x99\xe0\x92\x57\x59\xc3\x00\x62\xc0\x1f\x84\xa3\x84\xfd\x67\x18\x8e\x65\x80\xbd\x6b\x21\xeb\x53\x9a\xe3\x3d\xcf\x4f\x01\xa1\xcb\x9d\x1f\x28\xe6\xa7\x5f\x76\x20\x4f\x3a\xf0\xee\xeb\xe0\x02\xc4\x5e\x5f\x2b\x79\xa4\xb9\x77\xab\xcb\xba\x90\x0e\x45\x89\x65\x69\xe8\x66\xdd\xad\x36\x57\x14\xa8\x6c\x6d\x0a\x75\x13\xb6\x72\x85\x45\xa5\x34\x19\x94\x45\x89\x46\xd4\x8a\xa4\x32\xd7\xda\xba\x03\xb8\x35\x6c\x7b\x6b\xd8\xae\x87\x46\xbb\xeb\x60\x67\x55\xb3\xc6\xa7\xee\x28\xfe\x29\xea\x7c\xf9\x1d\x00\x00\xff\xff\x00\xb5\x08\x6b\x64\x01\x00\x00")

func memcached165NixBytes() ([]byte, error) {
	return bindataRead(
		_memcached165Nix,
		"memcached/1.6.5.nix",
	)
}

func memcached165Nix() (*asset, error) {
	bytes, err := memcached165NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "memcached/1.6.5.nix", size: 356, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _memcached166Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6e\xac\x30\x0c\x86\xf7\x39\x85\x95\xb7\x79\x5d\x4c\x60\x80\x64\x60\x10\x8b\x9e\x64\x94\x3a\x0e\x44\xc3\x00\x4a\x52\x16\x45\xdc\xbd\x0a\x52\x2b\x36\xdd\x58\x96\x65\x7f\xfe\xf5\xfd\xdb\x36\x30\x64\xdd\x44\xc0\x0d\x79\xb7\xea\xe8\xe6\x89\xc3\xbe\xb3\x71\x9e\xa7\xcb\x8b\x5e\xa8\x71\x20\x73\xb9\x3e\xd4\x43\x41\x07\xcb\xb3\x0f\xe2\x77\x2c\xe6\x95\xbc\x77\x86\xde\x63\xf4\xe1\xbf\x4e\xf5\x0e\x1b\x03\x58\xc9\x07\x37\x4f\xd0\x01\xbf\x0a\x25\x14\x6f\x19\x40\xf0\xf8\x83\xb0\x14\x71\xf8\xf4\xe3\xb1\x0c\x90\xba\x0e\xf8\x10\xe3\x12\xee\x59\x76\x7a\xe0\xfb\xcc\xba\x91\x42\x76\xca\x92\x80\x22\x6a\x2f\xfa\xaf\x83\x0b\x10\x06\x5d\xc8\x94\x8f\x37\x79\x6d\x73\x22\xb4\x5a\xca\xe6\x5a\x34\xd8\x50\x55\x91\xc1\x4a\xd9\xbc\xa0\x5b\xa9\x2d\xd5\x56\xa3\x2e\xa5\xfc\xa8\xc8\xa2\xc4\x5a\x99\x26\x2f\x2c\x96\x54\x16\xf6\x76\x00\xf7\x96\xed\x6f\x2d\x4b\x7a\x68\x32\x49\x07\x3b\xab\x5a\x34\x3e\x75\x4f\xe1\x4f\x51\xe7\xcb\xef\x00\x00\x00\xff\xff\x7c\x20\x2d\x41\x64\x01\x00\x00")

func memcached166NixBytes() ([]byte, error) {
	return bindataRead(
		_memcached166Nix,
		"memcached/1.6.6.nix",
	)
}

func memcached166Nix() (*asset, error) {
	bytes, err := memcached166NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "memcached/1.6.6.nix", size: 356, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _memcachedDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6e\xac\x30\x0c\x86\xf7\x39\x85\x95\xb7\x79\x5d\x4c\x60\x80\x64\x60\x10\x8b\x9e\x64\x94\x3a\x0e\x44\xc3\x00\x4a\x52\x16\x45\xdc\xbd\x0a\x52\x2b\x36\xdd\x58\x96\x65\x7f\xfe\xf5\xfd\xdb\x36\x30\x64\xdd\x44\xc0\x0d\x79\xb7\xea\xe8\xe6\x89\xc3\xbe\xb3\x71\x9e\xa7\xcb\x8b\x5e\xa8\x71\x20\x73\xb9\x3e\xd4\x43\x41\x07\xcb\xb3\x0f\xe2\x77\x2c\xe6\x95\xbc\x77\x86\xde\x63\xf4\xe1\xbf\x4e\xf5\x0e\x1b\x03\x58\xc9\x07\x37\x4f\xd0\x01\xbf\x0a\x25\x14\x6f\x19\x40\xf0\xf8\x83\xb0\x14\x71\xf8\xf4\xe3\xb1\x0c\x90\xba\x0e\xf8\x10\xe3\x12\xee\x59\x76\x7a\xe0\xfb\xcc\xba\x91\x42\x76\xca\x92\x80\x22\x6a\x2f\xfa\xaf\x83\x0b\x10\x06\x5d\xc8\x94\x8f\x37\x79\x6d\x73\x22\xb4\x5a\xca\xe6\x5a\x34\xd8\x50\x55\x91\xc1\x4a\xd9\xbc\xa0\x5b\xa9\x2d\xd5\x56\xa3\x2e\xa5\xfc\xa8\xc8\xa2\xc4\x5a\x99\x26\x2f\x2c\x96\x54\x16\xf6\x76\x00\xf7\x96\xed\x6f\x2d\x4b\x7a\x68\x32\x49\x07\x3b\xab\x5a\x34\x3e\x75\x4f\xe1\x4f\x51\xe7\xcb\xef\x00\x00\x00\xff\xff\x7c\x20\x2d\x41\x64\x01\x00\x00")

func memcachedDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_memcachedDefaultNix,
		"memcached/default.nix",
	)
}

func memcachedDefaultNix() (*asset, error) {
	bytes, err := memcachedDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "memcached/default.nix", size: 356, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mysql8017Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xbf\x4e\xc3\x30\x10\x87\x77\x3f\xc5\x29\x2c\x30\xd4\x76\x2a\xea\xa4\x8d\x32\x20\x31\xc2\x80\x78\x80\xca\xc4\x6e\xe2\xfc\xb1\xd3\xb3\x09\x4d\xa3\xbc\x3b\x4a\x00\xa9\x03\xcb\xe9\x74\xba\xfb\x7e\xa7\xef\x6e\x9a\x40\xe9\x93\xb1\x1a\x22\xa5\xd1\x0c\x32\x18\x67\x23\x98\x67\xd2\x3a\x67\x37\xdd\xe8\xcf\xed\x26\x3d\xf2\x63\x9c\x40\x0e\x7d\x53\x7a\xba\xce\x52\x4e\xdd\xa0\x11\x8d\xd2\x4f\x21\xa0\xbf\x97\x4b\x3d\xc0\x44\x00\x06\x8d\xde\x38\x0b\x39\x44\x29\xe5\x34\x4e\xa2\x8c\x00\x78\x2c\xfe\x08\x27\x1d\x8a\xea\x13\xdb\x75\x1b\x60\xe9\x72\x88\xaa\x10\x7a\x7f\x60\xac\x50\xf6\x27\x83\x16\xae\x63\xec\xd9\x7d\xd9\xd6\x49\xe5\xd9\xeb\xf8\xfe\xf6\xb2\x49\x29\x67\xbf\x6f\xad\x70\x1a\x24\xd2\xf2\xba\x66\x00\xf8\x4a\x6e\x77\x62\xc1\xc5\x5d\x8d\xed\xc5\xa6\x83\x29\x8d\xd8\x23\x47\x91\x3c\xd6\x5b\x65\x3e\x94\x6d\xa4\x44\x1e\xd7\x66\xb7\x17\xbb\xd2\x8f\x97\xa4\x11\xfc\x9a\x9c\x47\xb1\x42\xe6\x8c\xcc\x0f\x19\x59\xd4\x68\xab\x16\x15\xe4\x56\x53\x2f\x8b\x46\x96\xda\xff\x2f\xe9\xf6\xec\x3b\x00\x00\xff\xff\xc0\xae\xa7\xcc\x5d\x01\x00\x00")

func mysql8017NixBytes() ([]byte, error) {
	return bindataRead(
		_mysql8017Nix,
		"mysql/8.0.17.nix",
	)
}

func mysql8017Nix() (*asset, error) {
	bytes, err := mysql8017NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/8.0.17.nix", size: 349, mode: os.FileMode(420), modTime: time.Unix(1594689393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mysql8021Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x6b\xb4\x30\x10\x87\xef\xf9\x14\x83\xef\xe5\xed\x61\x93\xac\x12\x91\x15\x0f\x85\x1e\xdb\x43\xe9\x07\x58\x82\x89\xd1\x8d\x26\x6e\x92\xfa\x17\xbf\x7b\xd1\xb6\xb0\x87\x5e\x86\x61\x98\x79\x7e\xc3\xf3\x6f\x5d\x41\xc8\xaa\x31\x12\x22\x21\x5d\x33\xf0\xd0\x58\x13\xc1\xb6\xa1\xd6\x5a\x73\xea\x66\x7f\x6f\x4f\xd9\x95\x5e\xe3\x33\x14\xd0\x6b\xe5\xf1\x31\xcb\x28\xb6\x83\x74\xae\x11\xf2\x39\x04\xe7\xff\xf3\xbd\x5e\x60\x45\x00\x83\x74\xbe\xb1\x06\x0a\x88\x32\x4c\x71\x7c\x8e\x72\x04\xe0\x5d\xf9\x4b\xa8\x64\x28\xeb\x4f\xd7\x1e\xdb\x00\x7b\x57\x40\x54\x87\xd0\xfb\x0b\x21\xa5\x30\xdf\x19\xb8\xb4\x1d\x21\x2f\x76\x34\xad\xe5\xc2\x93\xb7\xf9\xe3\xfd\xf5\x94\x61\x4a\x7e\xde\x3a\xe0\x38\x70\x87\xd5\x72\x64\x00\xf8\x9a\xc7\x2c\xdd\x71\x54\x50\xaa\x19\x73\x7a\x11\xca\xb0\xf1\x96\xc4\xc3\xc4\x8d\xbe\x69\x36\x25\xf3\x58\xdd\xc7\x34\x5e\xa6\x45\x25\x1d\xa3\xc9\xe4\x14\x4b\xbb\x4e\x1c\x90\x2d\x47\xdb\x53\x8e\x76\x35\xd2\x88\x5d\x05\x7a\xd4\xd4\xf3\x52\x73\x25\xfd\xdf\x92\x1e\xcf\xbe\x02\x00\x00\xff\xff\x52\x56\xc8\x76\x5d\x01\x00\x00")

func mysql8021NixBytes() ([]byte, error) {
	return bindataRead(
		_mysql8021Nix,
		"mysql/8.0.21.nix",
	)
}

func mysql8021Nix() (*asset, error) {
	bytes, err := mysql8021NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/8.0.21.nix", size: 349, mode: os.FileMode(420), modTime: time.Unix(1594689474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mysqlDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x4f\x6b\xb4\x30\x10\x87\xef\xf9\x14\x83\xef\xe5\xed\x61\x93\xac\x12\x91\x15\x0f\x85\x1e\xdb\x43\xe9\x07\x58\x82\x89\xd1\x8d\x26\x6e\x92\xfa\x17\xbf\x7b\xd1\xb6\xb0\x87\x5e\x86\x61\x98\x79\x7e\xc3\xf3\x6f\x5d\x41\xc8\xaa\x31\x12\x22\x21\x5d\x33\xf0\xd0\x58\x13\xc1\xb6\xa1\xd6\x5a\x73\xea\x66\x7f\x6f\x4f\xd9\x95\x5e\xe3\x33\x14\xd0\x6b\xe5\xf1\x31\xcb\x28\xb6\x83\x74\xae\x11\xf2\x39\x04\xe7\xff\xf3\xbd\x5e\x60\x45\x00\x83\x74\xbe\xb1\x06\x0a\x88\x32\x4c\x71\x7c\x8e\x72\x04\xe0\x5d\xf9\x4b\xa8\x64\x28\xeb\x4f\xd7\x1e\xdb\x00\x7b\x57\x40\x54\x87\xd0\xfb\x0b\x21\xa5\x30\xdf\x19\xb8\xb4\x1d\x21\x2f\x76\x34\xad\xe5\xc2\x93\xb7\xf9\xe3\xfd\xf5\x94\x61\x4a\x7e\xde\x3a\xe0\x38\x70\x87\xd5\x72\x64\x00\xf8\x9a\xc7\x2c\xdd\x71\x54\x50\xaa\x19\x73\x7a\x11\xca\xb0\xf1\x96\xc4\xc3\xc4\x8d\xbe\x69\x36\x25\xf3\x58\xdd\xc7\x34\x5e\xa6\x45\x25\x1d\xa3\xc9\xe4\x14\x4b\xbb\x4e\x1c\x90\x2d\x47\xdb\x53\x8e\x76\x35\xd2\x88\x5d\x05\x7a\xd4\xd4\xf3\x52\x73\x25\xfd\xdf\x92\x1e\xcf\xbe\x02\x00\x00\xff\xff\x52\x56\xc8\x76\x5d\x01\x00\x00")

func mysqlDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_mysqlDefaultNix,
		"mysql/default.nix",
	)
}

func mysqlDefaultNix() (*asset, error) {
	bytes, err := mysqlDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/default.nix", size: 349, mode: os.FileMode(420), modTime: time.Unix(1594689474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node12181Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x6e\xc3\x20\x14\x45\x77\xbe\xe2\xc9\x5d\xda\x21\xd8\x80\xe3\x40\xa2\x0c\xfd\x92\x08\x9b\x67\x87\x26\x85\x08\xa8\x55\xd5\xf2\xbf\x57\x38\x4d\xeb\xa5\x0b\x82\x7b\xe1\xf0\x74\x9e\xa6\x09\x0c\xf6\xd6\x21\x14\x06\x83\x1d\x75\xb2\xde\x15\x30\xcf\xe4\xea\xbd\xdb\x38\x6f\xf0\x2d\x6e\x18\x3f\x31\x79\x62\x70\x84\xdb\x65\x88\xf4\x2f\xfd\xa4\x7e\xc4\x10\xac\xc1\xd7\x94\x42\x7c\xd6\x79\xdd\xc3\x44\x00\x9c\x7e\x47\x38\x42\xf1\x7b\x99\x32\x49\x59\x71\x20\x00\x23\x86\x68\xbd\xcb\xed\x3a\x8e\xa1\x7b\xfc\xd0\x63\xea\xce\x1f\xe1\xba\x90\x00\xf2\xee\x08\xc5\x39\xa5\x5b\xdc\x97\xe5\x1d\x49\x7d\x18\x4a\x63\x63\x2a\xc7\x1f\xca\x52\x6c\x1e\x27\x9a\x74\xa0\xc3\xd7\x82\x06\x88\x67\xcd\xb7\x4d\xa6\xb4\xb8\x15\x5c\xaa\x9a\x31\x6e\xaa\x06\x9b\x1d\xeb\x5a\x61\x94\x90\x12\xb9\x16\xbd\xe6\x5d\xa3\x2a\x53\x57\xad\xe9\xb5\xc2\x5a\x70\xc5\x99\x56\x58\xed\x64\x2b\x7a\x5e\xdf\x67\x9d\x0f\x64\x7e\x39\x90\xec\x0f\x9d\xc9\xbe\xc8\xda\xe5\x4d\x77\x17\x3d\x60\xfc\xcf\xe4\xfa\xe1\x77\x00\x00\x00\xff\xff\x3a\x18\xad\x66\x84\x01\x00\x00")

func node12181NixBytes() ([]byte, error) {
	return bindataRead(
		_node12181Nix,
		"node/12.18.1.nix",
	)
}

func node12181Nix() (*asset, error) {
	bytes, err := node12181NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/12.18.1.nix", size: 388, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node12182Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x53\xf3\x20\x10\x86\xef\xfc\x8a\x9d\x7c\x97\xcf\x43\x49\x83\xb6\xa6\xcd\xe4\xe0\x2f\xe9\xd0\x40\x09\x36\x81\xb8\x8b\x44\xcd\xe4\xbf\x3b\x44\xab\xb9\x78\x61\xe0\x7d\xd9\x67\x67\x9e\x7f\xd3\x04\x4a\x5f\xac\xd3\x90\x29\x8d\x36\xca\x60\xbd\xcb\x60\x9e\x59\xe7\xbd\xdb\x38\xaf\xf4\x33\x6d\x0a\x71\x2a\xca\x93\x80\x1a\x86\xab\x21\xfe\x9b\xbe\x71\x1f\x35\xa2\x55\xfa\x29\x04\xa4\xff\x32\x9d\x47\x98\x18\x80\x93\xbd\x86\x1a\xb2\x9f\xcf\xbc\x28\xb9\xc8\x2a\x06\x10\x35\x92\xf5\x2e\xb5\xeb\x98\xb0\xb9\x6d\xb8\xe8\xd0\xb4\xaf\xd8\x2d\x24\x80\x74\xab\x21\x6b\x43\x18\xe8\x98\xe7\x5f\x48\xee\xd1\xe4\xca\x52\xc8\xe3\x37\x65\x29\x36\xb7\x17\x0f\x12\xb9\xf9\x58\xd0\x00\xd4\x4a\xb1\xdb\x27\xca\x76\x27\x28\x8a\x43\xbc\x17\x63\x33\xd2\x43\x39\xbc\xcb\xb2\x1f\x4d\xdb\x13\xed\xbb\x83\x29\x70\x1c\x9c\x53\xa6\xe8\x1f\x3b\xb3\x8d\xe7\xbd\x7a\xc1\xf3\x02\x99\x2b\x36\xdf\x55\x2c\x39\xd3\x4e\x25\x47\x6c\xed\x6f\x90\xcd\x55\x1a\x4d\x7f\xd9\x5b\x0f\x7e\x06\x00\x00\xff\xff\x6c\xde\x13\xcf\x78\x01\x00\x00")

func node12182NixBytes() ([]byte, error) {
	return bindataRead(
		_node12182Nix,
		"node/12.18.2.nix",
	)
}

func node12182Nix() (*asset, error) {
	bytes, err := node12182NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/12.18.2.nix", size: 376, mode: os.FileMode(420), modTime: time.Unix(1594689310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node1440Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6e\x83\x30\x0c\xc7\xef\x79\x0a\x8b\x5d\xb6\x43\x43\x87\x18\xd5\x8a\x38\xec\x49\xaa\x8c\x98\x10\x3e\x92\xd4\xc9\x80\x15\xf1\xee\x13\x74\x1f\x5c\x76\x89\xe2\xbf\xed\x9f\xa5\xdf\xc3\x3c\x83\xc4\x4a\x1b\x84\x48\x22\xe9\x41\x04\x6d\x4d\x04\xcb\xc2\x3a\x6b\xcd\xc1\x58\x89\x8d\x3f\x3c\xa7\x97\xf4\x72\x84\x02\x5c\xab\x3c\xff\x0b\x27\x6e\x07\x24\xd2\x12\xdf\x42\x20\xff\x28\xd6\xf7\x0c\x33\x03\x30\xa2\x47\x28\x20\xfa\x1d\xe6\x29\x3f\x46\x39\x03\x18\x90\xbc\xb6\x66\x6d\xee\x52\x4f\xe5\x0f\xbf\xc2\x50\xd6\x1f\xd4\x6d\x1c\x80\xf5\x57\x40\x54\x87\xe0\xfc\x39\x8e\xef\x40\x6e\x49\xc5\x52\xfb\x10\x0f\x77\xc8\x96\x1f\xbe\x0b\x1e\x04\x71\x75\xdb\xc0\x00\xbe\x16\xc9\x4b\xb6\xdd\x9b\x26\x27\x5d\x95\x8c\xa7\xda\xf5\xba\x4b\xde\x95\xea\x4d\x32\x66\xe2\xb5\x6d\x8e\x0d\x55\x1d\xa5\x53\x5f\x65\xb7\xd3\xf5\x4a\x9f\x64\xca\xd1\x0b\xb7\x41\x96\x9c\x2d\x4f\x39\x5b\x75\xa1\x91\xab\x1e\xb6\x57\xe7\x44\xd9\x0a\x85\xfe\x1f\x71\xfb\xbd\xaf\x00\x00\x00\xff\xff\x8e\x14\xd6\x72\x72\x01\x00\x00")

func node1440NixBytes() ([]byte, error) {
	return bindataRead(
		_node1440Nix,
		"node/14.4.0.nix",
	)
}

func node1440Nix() (*asset, error) {
	bytes, err := node1440NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/14.4.0.nix", size: 370, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node1450Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x6e\x83\x30\x0c\x87\xef\x79\x0a\x8b\x5d\xb6\x03\xa1\xb4\x05\xb6\x22\x0e\x7b\x92\x2a\x4d\x5c\x48\x0b\x09\x72\xb2\x6c\x05\xf1\xee\x13\x74\x7f\xb8\xf4\x12\xc5\x3f\xdb\x9f\xa5\xef\x69\x1c\x41\xe1\x59\x1b\x84\x48\x21\xe9\x20\xbc\xb6\x26\x82\x69\x62\xad\xb5\x26\x36\x56\xe1\xc5\xc5\xe9\xfe\x98\x1d\x37\x50\x41\x7f\xad\x1d\xff\x0f\xbf\xb8\x0d\x48\xa4\x15\xbe\x7b\x4f\xee\x59\xcc\xef\x01\x46\x06\x60\x44\x87\x50\x41\xf4\x37\xcc\x33\xbe\x89\x4a\x06\x10\x90\x9c\xb6\x66\x6e\xae\x52\x47\xf2\x97\x7f\x46\x2f\x9b\x0f\x6a\x17\x0e\xc0\xfc\xab\x20\x6a\xbc\xef\xdd\x21\x49\xee\x40\x6e\xa9\x4e\x94\x76\x3e\x09\x77\xc8\x92\xc7\x3f\x05\xf7\x82\x78\x3d\x2c\x60\x00\xd7\x88\x6d\x96\x2f\xf7\x4e\x66\xd7\xa5\x43\xf1\xd6\xa6\x42\x19\x45\xbb\xb0\xcd\x64\x21\x87\x7d\xdb\x9d\xd2\xfc\x96\x53\xd0\x72\x68\xcd\xab\x70\xf4\x59\xdc\xe4\x65\xa0\xa0\x16\xc8\x54\xb2\xe9\xa5\x64\xb3\x2e\x34\x6a\xd6\xc3\xd6\xea\x7a\x21\xaf\xa2\x46\xf7\x40\xdc\x7a\xef\x3b\x00\x00\xff\xff\x37\x19\x24\x17\x72\x01\x00\x00")

func node1450NixBytes() ([]byte, error) {
	return bindataRead(
		_node1450Nix,
		"node/14.5.0.nix",
	)
}

func node1450Nix() (*asset, error) {
	bytes, err := node1450NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/14.5.0.nix", size: 370, mode: os.FileMode(420), modTime: time.Unix(1594689213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x6e\x83\x30\x0c\x87\xef\x79\x0a\x8b\x5d\xb6\x03\xa1\xb4\x05\xb6\x22\x0e\x7b\x92\x2a\x4d\x5c\x48\x0b\x09\x72\xb2\x6c\x05\xf1\xee\x13\x74\x7f\xb8\xf4\x12\xc5\x3f\xdb\x9f\xa5\xef\x69\x1c\x41\xe1\x59\x1b\x84\x48\x21\xe9\x20\xbc\xb6\x26\x82\x69\x62\xad\xb5\x26\x36\x56\xe1\xc5\xc5\xe9\xfe\x98\x1d\x37\x50\x41\x7f\xad\x1d\xff\x0f\xbf\xb8\x0d\x48\xa4\x15\xbe\x7b\x4f\xee\x59\xcc\xef\x01\x46\x06\x60\x44\x87\x50\x41\xf4\x37\xcc\x33\xbe\x89\x4a\x06\x10\x90\x9c\xb6\x66\x6e\xae\x52\x47\xf2\x97\x7f\x46\x2f\x9b\x0f\x6a\x17\x0e\xc0\xfc\xab\x20\x6a\xbc\xef\xdd\x21\x49\xee\x40\x6e\xa9\x4e\x94\x76\x3e\x09\x77\xc8\x92\xc7\x3f\x05\xf7\x82\x78\x3d\x2c\x60\x00\xd7\x88\x6d\x96\x2f\xf7\x4e\x66\xd7\xa5\x43\xf1\xd6\xa6\x42\x19\x45\xbb\xb0\xcd\x64\x21\x87\x7d\xdb\x9d\xd2\xfc\x96\x53\xd0\x72\x68\xcd\xab\x70\xf4\x59\xdc\xe4\x65\xa0\xa0\x16\xc8\x54\xb2\xe9\xa5\x64\xb3\x2e\x34\x6a\xd6\xc3\xd6\xea\x7a\x21\xaf\xa2\x46\xf7\x40\xdc\x7a\xef\x3b\x00\x00\xff\xff\x37\x19\x24\x17\x72\x01\x00\x00")

func nodeDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_nodeDefaultNix,
		"node/default.nix",
	)
}

func nodeDefaultNix() (*asset, error) {
	bytes, err := nodeDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node/default.nix", size: 370, mode: os.FileMode(420), modTime: time.Unix(1594689213, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresql1013Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcf\x6e\x83\x30\x0c\x87\xef\x79\x0a\x8b\x5d\xb6\x43\xf3\x67\x69\x2b\x56\xc4\x61\x4f\x52\xa5\x10\x42\x06\x25\x99\x13\xe8\x00\xf1\xee\x13\x48\xd3\xd8\x61\x17\xcb\xb2\xec\xef\x67\x7d\x4f\xf3\x0c\xa5\xae\x6c\xa7\x21\x29\x35\xda\x41\x45\xeb\xba\x04\x96\x85\xb4\xce\x75\x07\xef\x42\x34\xa8\xc3\x67\x7b\x10\xfc\x2a\x24\xe4\xe0\x1b\x13\xe8\xef\xfc\x2a\x38\x75\x83\x46\xb4\xa5\x7e\x8f\x11\xc3\xb3\x5a\xeb\x05\x66\x02\x30\x68\x0c\xd6\x75\x90\x43\x22\x38\x15\x32\xc9\x08\x40\xc0\xe2\x07\x53\xe9\x58\xd4\x3d\xb6\xdb\x32\xc0\xda\xe5\x90\xd4\x31\xfa\x70\x61\xac\x8a\x7e\x17\x44\x1d\x1a\xe6\xfb\x1b\x0b\xae\xc7\x42\xb3\x61\x23\xb2\x3f\x1f\x52\x21\x69\x54\x48\xcd\xb4\x25\x01\x84\x5a\xbd\x9e\xce\x2b\x94\x1b\x65\x54\xf3\x48\xed\x78\xc4\x29\x6d\xab\x23\x3f\x0d\xe3\x23\x95\xed\xdd\x9c\xcd\x87\x7c\x43\x55\xa6\x72\xfc\x1a\x6f\x15\x8e\x93\xb9\x17\xf5\x91\xdb\x0d\xb2\x64\x64\x79\xc9\xc8\x6a\x4a\x77\xe5\x6a\x86\xec\xad\x79\x55\x34\xca\xe8\xf0\xbf\xb3\xfd\xe9\x77\x00\x00\x00\xff\xff\xbd\x0d\x93\x0d\x70\x01\x00\x00")

func postgresql1013NixBytes() ([]byte, error) {
	return bindataRead(
		_postgresql1013Nix,
		"postgresql/10.13.nix",
	)
}

func postgresql1013Nix() (*asset, error) {
	bytes, err := postgresql1013NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/10.13.nix", size: 368, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresql118Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6e\xb3\x30\x0c\xc7\xef\x79\x0a\x8b\xef\xf2\xed\xd0\x84\x74\x2b\xa0\x22\x0e\x7b\x92\x2a\x90\x10\x28\x28\x09\x4e\x48\xb7\x22\xde\x7d\x02\x69\x1a\x3b\xec\x62\x59\x96\xfd\xff\x59\xbf\x7f\xcb\x02\x52\xb5\xbd\x51\x90\x48\x85\x7d\x14\xa1\xb7\x26\x81\x75\x25\xa3\xb5\xe6\xe4\xac\x0f\x1a\x95\x9f\xc6\x13\xe7\xb7\x02\x2a\x70\x83\xf6\xf4\x67\x7c\xe3\x9c\xda\xa8\x10\x7b\xa9\xde\x43\x40\xff\x5f\x6c\xf5\x0a\x0b\x01\x88\x0a\x7d\x6f\x0d\x54\x90\x70\x4e\x8b\xa4\x24\x00\x1e\x9b\xef\x94\x56\x85\xa6\x9b\x71\xdc\x77\x01\xb6\xae\x82\xa4\x0b\xc1\xf9\x2b\x63\x6d\x70\x07\x0e\xb5\xa8\x99\x9b\x6b\xe6\xed\x8c\x8d\x62\x71\x0b\x64\xbf\xde\xa3\x05\x0d\x02\xa9\x7e\xee\x1c\x00\xdf\x89\xf3\x25\xdb\xe1\x8f\x34\x0a\x31\x5e\xe4\xf9\x31\xbe\xa6\xf1\x53\x0b\xac\x6b\xd1\x0d\xdd\x9d\xe7\xe9\xc7\x45\xe7\x45\x6a\x8c\xd3\x59\x6e\x26\xf3\xd4\x32\x33\xd3\xdb\x7d\x0f\x59\x4b\xb2\xbe\x94\x64\xb3\xa4\x8c\xdc\xac\x90\xa3\x31\x27\x9a\x41\x68\xe5\xff\xf4\x75\xbc\xfc\x0a\x00\x00\xff\xff\x93\x5c\xea\xcb\x6b\x01\x00\x00")

func postgresql118NixBytes() ([]byte, error) {
	return bindataRead(
		_postgresql118Nix,
		"postgresql/11.8.nix",
	)
}

func postgresql118Nix() (*asset, error) {
	bytes, err := postgresql118NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/11.8.nix", size: 363, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresql123Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6e\xeb\x20\x10\x46\xf7\x3c\xc5\xc8\x77\x73\xbb\x08\x18\x08\x60\x27\xca\xa2\x4f\x12\x61\x7e\x1c\x2b\x91\xa1\x40\xbc\x68\xe4\x77\xaf\xb0\x54\xd5\x5d\x74\x33\x1a\x8d\x66\xce\x37\x3a\xff\x5e\x2f\xb0\xce\x4f\xb3\x83\xc6\xba\x34\x2d\xba\x4c\x61\x6e\x60\x5d\xd1\x23\x84\xf9\x10\x43\x2e\x63\x72\xf9\xe3\x71\xa0\xec\xca\xe1\x02\xf1\x3e\x66\xfc\x33\xbe\x52\x86\xc3\xe2\x52\x9a\xac\x7b\x2f\x25\xe5\xff\xba\xd6\x13\xbc\x10\xc0\xe2\x52\x9e\xc2\x0c\x17\x68\x28\xc3\xbc\x39\x23\x80\x9c\xcc\x37\xc5\xbb\x62\x6e\xcf\xf4\xd8\x76\x01\x6a\x77\x81\xe6\x56\x4a\xcc\x27\x42\x7c\x89\xbb\x1c\x1c\xd2\x48\xe2\x73\x20\x39\x3c\x93\x71\x64\xa9\x40\xf2\xeb\x3d\xcc\x71\xd1\x09\x8f\x9f\x5b\x0e\x40\xbe\x69\x26\x64\x45\xaa\xb6\xf3\x56\x0c\x9c\xe9\x5e\x09\xa5\xa4\xea\x2d\x37\x94\x77\xec\x68\x24\xe7\x3d\x97\xbe\xeb\xa4\x56\x9c\x7b\x23\x84\x1e\x84\xee\xd9\xb1\x1d\x24\x15\x9a\xb6\xc2\x8b\x76\x03\xae\x67\xb4\xbe\x9d\x51\x35\xe6\x66\x5b\x0d\xa1\xbd\xbd\xa8\xcd\x5d\x8f\x2e\xff\xe9\x6e\x7f\xf9\x15\x00\x00\xff\xff\x32\x77\xa5\xce\x77\x01\x00\x00")

func postgresql123NixBytes() ([]byte, error) {
	return bindataRead(
		_postgresql123Nix,
		"postgresql/12.3.nix",
	)
}

func postgresql123Nix() (*asset, error) {
	bytes, err := postgresql123NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/12.3.nix", size: 375, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresql9522Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x6e\xeb\x20\x10\x46\xf7\x3c\xc5\xc8\x77\x73\xbb\x08\x24\x54\x58\x75\xa2\x2c\xfa\x24\x16\xb1\x31\x26\x58\x40\x66\x08\x8a\x12\xf9\xdd\x2b\xbb\xaa\xea\x55\x37\x08\xcd\xcf\xf9\x46\xe7\xdf\xeb\x05\xbd\x19\x5c\x30\x50\xf5\x06\x5d\xd1\xd9\xc5\x50\xc1\x3c\xb3\x29\xc6\xb0\x4b\x91\xb2\x45\x43\xb7\x69\xd7\xb4\xaa\x95\x12\xce\x90\xbc\x25\xfe\xdb\x68\x9b\x56\xf1\x58\x0c\xa2\xeb\xcd\x67\xce\x48\xff\xf5\xf2\x1e\xe1\xc5\x00\x8a\x41\x72\x31\xc0\x19\xaa\x86\x2b\x2e\x65\x75\x62\x00\x84\xdd\x0f\x68\x30\xb9\x1b\xef\x38\xad\xd3\x00\xcb\xef\x0c\xd5\x98\x73\xa2\xa3\x10\x43\x4e\x9b\x28\x1e\xd1\x8a\x74\xbf\x08\x8a\x77\xec\x8c\x28\xdf\x48\xb1\xbd\x72\xad\xf0\xac\x91\xdb\xe7\x9a\x05\x40\xa3\x96\xaa\x5e\xb0\xfb\xa2\x93\x53\x7b\x5b\xbb\xfd\x6d\x54\x97\xfe\x83\xca\x20\x1b\x7d\xad\xaf\x87\x49\x3d\xde\x2f\xe8\x0f\x3e\x1c\x30\x78\xf2\xae\x9e\xca\x40\x8f\x67\xb3\x42\xe6\x13\x9b\xdf\x4e\x6c\xd1\x65\x42\xbf\xe8\x61\x5b\x75\x49\x77\x5e\x5b\x43\x7f\x88\xdb\xee\x7e\x05\x00\x00\xff\xff\xbd\x7f\xdd\xa7\x76\x01\x00\x00")

func postgresql9522NixBytes() ([]byte, error) {
	return bindataRead(
		_postgresql9522Nix,
		"postgresql/9.5.22.nix",
	)
}

func postgresql9522Nix() (*asset, error) {
	bytes, err := postgresql9522NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/9.5.22.nix", size: 374, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresql9618Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xcd\x6e\xeb\x20\x10\x46\xf7\x3c\xc5\xc8\x77\x73\xbb\x08\x98\xc4\x60\x48\x94\x45\x9f\xc4\x22\x30\x38\x56\x22\x43\x81\x78\x51\xcb\xef\x5e\xd9\x55\x55\xaf\xba\x41\x68\x7e\xce\x37\x3a\xff\xe6\x19\x1c\xfa\x61\x44\xa8\x1c\xa6\x61\x32\x65\x08\x63\x05\xcb\x42\x9e\x21\x8c\x87\x18\x72\xe9\x13\xe6\x8f\xe7\x41\x77\xb2\xe3\x0a\xae\x10\x1f\x7d\xa6\xbf\x8d\x4e\x77\x92\x86\x09\x53\x1a\x1c\xbe\x97\x92\xf2\x7f\xb3\xbe\x67\x98\x09\xc0\x84\x29\x0f\x61\x84\x2b\x54\x9a\x4a\xca\x55\x75\x21\x00\x39\xd9\x1f\x90\xc7\x62\xef\xaf\xf4\xdc\xa6\x01\xd6\xdf\x15\xaa\x7b\x29\x31\x9f\x19\xf3\x25\xee\xa2\x68\x48\x3d\x8b\xaf\x1b\xcb\xe1\x95\x2c\xb2\xe9\x1b\xc9\xf6\x57\x6e\x15\x5a\x4c\xa2\xfd\xe7\x96\x05\x90\xef\xe6\x28\xe4\x8a\x15\x58\xd7\x37\xd7\x20\x6a\xd4\xc7\xa6\x3d\x39\xd4\xb5\x17\xc6\xd6\xc2\xb5\x4a\x69\xa9\x35\x2a\x7f\xe2\xad\x30\xd2\x8b\x9b\xae\x05\x6f\x24\x97\x6d\xc3\xa5\x3a\xfa\xc6\xca\x0d\xb8\x5c\xc8\xf2\x76\x21\xab\x3a\x1c\xdd\xaa\x8a\xec\x35\x46\x63\x1f\xa6\xc7\xfc\x87\xc4\xfd\xee\x57\x00\x00\x00\xff\xff\xdd\xa4\x39\x6e\x82\x01\x00\x00")

func postgresql9618NixBytes() ([]byte, error) {
	return bindataRead(
		_postgresql9618Nix,
		"postgresql/9.6.18.nix",
	)
}

func postgresql9618Nix() (*asset, error) {
	bytes, err := postgresql9618NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/9.6.18.nix", size: 386, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _postgresqlDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xcd\x6e\xeb\x20\x10\x46\xf7\x3c\xc5\xc8\x77\x73\xbb\x08\x18\x08\x60\x27\xca\xa2\x4f\x12\x61\x7e\x1c\x2b\x91\xa1\x40\xbc\x68\xe4\x77\xaf\xb0\x54\xd5\x5d\x74\x33\x1a\x8d\x66\xce\x37\x3a\xff\x5e\x2f\xb0\xce\x4f\xb3\x83\xc6\xba\x34\x2d\xba\x4c\x61\x6e\x60\x5d\xd1\x23\x84\xf9\x10\x43\x2e\x63\x72\xf9\xe3\x71\xa0\xec\xca\xe1\x02\xf1\x3e\x66\xfc\x33\xbe\x52\x86\xc3\xe2\x52\x9a\xac\x7b\x2f\x25\xe5\xff\xba\xd6\x13\xbc\x10\xc0\xe2\x52\x9e\xc2\x0c\x17\x68\x28\xc3\xbc\x39\x23\x80\x9c\xcc\x37\xc5\xbb\x62\x6e\xcf\xf4\xd8\x76\x01\x6a\x77\x81\xe6\x56\x4a\xcc\x27\x42\x7c\x89\xbb\x1c\x1c\xd2\x48\xe2\x73\x20\x39\x3c\x93\x71\x64\xa9\x40\xf2\xeb\x3d\xcc\x71\xd1\x09\x8f\x9f\x5b\x0e\x40\xbe\x69\x26\x64\x45\xaa\xb6\xf3\x56\x0c\x9c\xe9\x5e\x09\xa5\xa4\xea\x2d\x37\x94\x77\xec\x68\x24\xe7\x3d\x97\xbe\xeb\xa4\x56\x9c\x7b\x23\x84\x1e\x84\xee\xd9\xb1\x1d\x24\x15\x9a\xb6\xc2\x8b\x76\x03\xae\x67\xb4\xbe\x9d\x51\x35\xe6\x66\x5b\x0d\xa1\xbd\xbd\xa8\xcd\x5d\x8f\x2e\xff\xe9\x6e\x7f\xf9\x15\x00\x00\xff\xff\x32\x77\xa5\xce\x77\x01\x00\x00")

func postgresqlDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_postgresqlDefaultNix,
		"postgresql/default.nix",
	)
}

func postgresqlDefaultNix() (*asset, error) {
	bytes, err := postgresqlDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/default.nix", size: 375, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _redis604Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x0a\x91\x5d\xb6\x43\x1d\xa7\x4e\x13\xbb\xa5\x87\x3d\x49\x51\x6d\xb5\x31\x0d\x76\xb0\xbd\x0c\x16\xf2\xee\xc3\xa1\x83\x1e\x76\x11\x42\xe8\xff\x24\xbe\xb7\x65\x01\x4b\x37\xe7\x09\x2a\x4b\xd1\xcd\x98\x5d\xf0\x15\xac\x2b\x1b\x43\xf0\xbb\x48\xd6\xa5\x5d\x77\x11\x97\x16\xce\x30\x3d\xee\x89\x6f\x23\x1e\x66\x8a\xd1\x59\xfa\xcc\x39\xa6\x77\x2c\xf5\x08\x0b\x03\x98\x29\x26\x17\x3c\x9c\xa1\xea\xb8\xe0\x6d\x75\x62\x00\x29\x9a\xbf\xf8\x8d\xb2\x19\xbe\xe2\xb8\x2d\x03\x94\xee\x0c\xd5\x90\xf3\x74\xac\x6b\x1b\xbe\xfd\x18\xd0\x3e\x8f\xb8\x50\x47\x1a\x09\x13\xa5\xfa\xf9\x49\x41\xf2\x8c\x91\xdf\x7f\x36\x32\x40\x1a\x70\x7f\xe8\x0a\x44\x4a\xd9\x0b\x71\xc0\x86\x84\x91\x88\x7b\x2d\x8d\xea\x8d\x6c\x64\xdb\xf5\x84\x0a\x4d\xd3\x68\xd5\xea\x7d\x73\xc3\xab\x50\x4a\xf4\x5a\xab\x2b\xf6\xdd\xc1\x68\xdd\x4a\x4b\x1b\x70\x3d\xb1\xf5\xe3\xc4\x8a\x18\xf2\xb6\x88\x60\xaf\x92\x26\x34\x0f\xbc\x53\xfa\x57\xd1\x6b\xea\x37\x00\x00\xff\xff\xc1\xe5\x25\xfc\x5a\x01\x00\x00")

func redis604NixBytes() ([]byte, error) {
	return bindataRead(
		_redis604Nix,
		"redis/6.0.4.nix",
	)
}

func redis604Nix() (*asset, error) {
	bytes, err := redis604NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis/6.0.4.nix", size: 346, mode: os.FileMode(420), modTime: time.Unix(1594084860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _redis605Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xac\x30\x0c\x46\xf7\x79\x0a\x8b\xbb\xb9\x5d\x4c\xa0\xfc\x49\x33\x88\x45\x9f\x64\x94\x12\x43\x42\x68\x42\xe3\x34\x48\x45\xbc\x7b\x15\x34\x95\x66\xd1\x4d\x14\x59\xfe\x8e\xed\xf3\x6f\xdf\x41\xe2\xa8\x2d\x42\x26\xd1\xeb\x28\x82\x76\x36\x83\xe3\x60\x8b\x73\xf6\xe2\x51\x6a\xba\xb4\xf7\xe2\xde\x40\x0f\xab\x99\x88\x9f\x25\xee\x22\x7a\xaf\x25\xbe\x85\xe0\xe9\xbf\x48\xef\x0d\x76\x06\x10\xd1\x93\x76\x16\x7a\xc8\x5a\x5e\xf0\x26\xeb\x18\x00\xf9\xe1\x37\x3e\x62\x18\xd4\x97\x5f\xce\x66\x80\xf4\xeb\x21\x53\x21\xac\xb7\x3c\x97\x6e\xb3\x8b\x13\xf2\x31\x44\xbb\xdc\xe3\x82\x82\x90\xf2\xc7\x26\x09\xc9\x83\xf0\x7c\xfa\x3e\xc9\x00\xa4\x44\xd9\xb4\x09\xf2\xda\xac\x1f\xa6\xda\xaa\x61\x56\x36\xd6\xc5\xac\xdf\xa5\x88\xa3\xb1\x75\xdd\x2a\x9a\xed\x55\xda\x75\x33\xe5\xd6\x54\xd7\x76\x2e\x67\xf5\x29\x0d\x95\x27\xe4\xe8\xd8\xf1\xd2\xb1\x24\x03\xad\x4c\xc7\xb3\x67\x31\xab\x18\x8c\x98\x90\xfe\xd4\xf2\x9c\xfa\x09\x00\x00\xff\xff\x42\x30\x96\xe7\x4e\x01\x00\x00")

func redis605NixBytes() ([]byte, error) {
	return bindataRead(
		_redis605Nix,
		"redis/6.0.5.nix",
	)
}

func redis605Nix() (*asset, error) {
	bytes, err := redis605NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis/6.0.5.nix", size: 334, mode: os.FileMode(420), modTime: time.Unix(1594571076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _redisDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x6e\xac\x30\x0c\x46\xf7\x79\x0a\x8b\xbb\xb9\x5d\x4c\xa0\xfc\x49\x33\x88\x45\x9f\x64\x94\x12\x43\x42\x68\x42\xe3\x34\x48\x45\xbc\x7b\x15\x34\x95\x66\xd1\x4d\x14\x59\xfe\x8e\xed\xf3\x6f\xdf\x41\xe2\xa8\x2d\x42\x26\xd1\xeb\x28\x82\x76\x36\x83\xe3\x60\x8b\x73\xf6\xe2\x51\x6a\xba\xb4\xf7\xe2\xde\x40\x0f\xab\x99\x88\x9f\x25\xee\x22\x7a\xaf\x25\xbe\x85\xe0\xe9\xbf\x48\xef\x0d\x76\x06\x10\xd1\x93\x76\x16\x7a\xc8\x5a\x5e\xf0\x26\xeb\x18\x00\xf9\xe1\x37\x3e\x62\x18\xd4\x97\x5f\xce\x66\x80\xf4\xeb\x21\x53\x21\xac\xb7\x3c\x97\x6e\xb3\x8b\x13\xf2\x31\x44\xbb\xdc\xe3\x82\x82\x90\xf2\xc7\x26\x09\xc9\x83\xf0\x7c\xfa\x3e\xc9\x00\xa4\x44\xd9\xb4\x09\xf2\xda\xac\x1f\xa6\xda\xaa\x61\x56\x36\xd6\xc5\xac\xdf\xa5\x88\xa3\xb1\x75\xdd\x2a\x9a\xed\x55\xda\x75\x33\xe5\xd6\x54\xd7\x76\x2e\x67\xf5\x29\x0d\x95\x27\xe4\xe8\xd8\xf1\xd2\xb1\x24\x03\xad\x4c\xc7\xb3\x67\x31\xab\x18\x8c\x98\x90\xfe\xd4\xf2\x9c\xfa\x09\x00\x00\xff\xff\x42\x30\x96\xe7\x4e\x01\x00\x00")

func redisDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_redisDefaultNix,
		"redis/default.nix",
	)
}

func redisDefaultNix() (*asset, error) {
	bytes, err := redisDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis/default.nix", size: 334, mode: os.FileMode(420), modTime: time.Unix(1594571076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ruby266Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x8a\xc3\x20\x14\x85\xf7\x3e\xc5\x25\xb3\x99\x59\xd4\x44\x93\x18\xda\xd2\xc5\x3c\x49\xf1\xe7\x26\x91\x8a\x06\xb5\x81\x69\xc9\xbb\x0f\xa6\x0c\x74\x31\x1b\xf1\x1e\xf4\xf3\xf8\x7d\x3c\x9f\x60\x70\xb4\x1e\xa1\x32\x18\xed\x2a\xb3\x0d\xbe\x82\x6d\x23\x2e\x04\x7f\x88\x77\xf5\x73\xe0\x57\x71\x15\x70\x81\xe5\x36\x25\x5a\x12\x1a\x56\x8c\xd1\x1a\xfc\xce\x39\xa6\x4f\x59\xd6\x13\x3c\x09\xc0\x8a\x31\xd9\xe0\xe1\x02\x15\xa7\x82\x8a\xea\x4c\x00\x52\xd4\x7f\xb7\x47\xcc\x7a\xbe\x47\xb7\x1f\x06\x28\xbb\x0b\x54\x73\xce\x4b\x3a\xd5\xb5\x96\x7a\xc6\xfd\x85\x83\x93\x7e\xa2\x21\x4e\xf5\x72\x57\x75\x49\x6a\x4e\x45\xfd\xaa\x53\xc0\x34\xcb\x48\xa7\xc7\xce\x07\x48\xb3\xe4\x7d\xa9\x58\xb5\xa2\x53\xac\x6b\x0d\x8e\xad\x68\x94\xd4\x4c\x0d\x1d\xaa\x5e\xa0\x11\x8d\x62\xb2\x31\x5a\x8a\xae\x3d\xaa\xa6\x61\xfd\x20\x91\xb1\x71\x1c\x06\xd3\x6b\xc3\xf1\xc8\xf9\x91\xed\xc0\xed\x4c\xb6\xaf\x33\x29\x72\xd0\x9b\x22\x83\xbc\x8b\x5a\xa4\xbe\xc9\x09\xd3\x7f\x9a\xc8\xfe\x4d\x67\x95\xd5\xc1\xaf\xaf\x29\x2c\xe8\x53\x72\xaf\xe1\xe1\xac\x7a\x27\xff\x06\x00\x00\xff\xff\x96\x95\xca\x3a\x82\x01\x00\x00")

func ruby266NixBytes() ([]byte, error) {
	return bindataRead(
		_ruby266Nix,
		"ruby/2.6.6.nix",
	)
}

func ruby266Nix() (*asset, error) {
	bytes, err := ruby266NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.6.6.nix", size: 386, mode: os.FileMode(420), modTime: time.Unix(1594085619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ruby271Nix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x8a\xf3\x20\x14\x86\xf7\x5e\xc5\x21\xdf\xe6\x9b\x45\x8d\xda\x24\x66\x5a\xba\x98\x2b\x09\xfe\x9c\x26\xd2\xa0\x41\x6d\x60\x5a\x72\xef\x83\x29\x03\x5d\xcc\x46\x7c\x5f\xe4\xf1\x9c\xe7\xdf\xf3\x09\x16\xaf\xce\x23\x54\x16\xa3\x5b\x55\x76\xc1\x57\xb0\x6d\x64\x0e\xc1\x1f\xe2\x5d\x7f\x1f\xc4\x20\x07\x0e\x17\x58\x6e\x63\xa2\xa5\x19\xc4\x20\x69\x58\x31\x46\x67\xf1\x2b\xe7\x98\xfe\xab\x72\x9e\xe0\x49\x00\x56\x8c\xc9\x05\x0f\x17\xa8\x04\x95\x94\x57\x67\x02\x90\xa2\xf9\x25\x5c\x31\x9b\xe9\x1e\xe7\xfd\x31\x40\xb9\x5d\xa0\x9a\x72\x5e\xd2\xa9\xae\x8d\x32\x13\xee\xbf\x1c\x66\xe5\x47\x1a\xe2\x58\x2f\x77\x5d\x97\xa6\x16\x54\xd6\xaf\x91\x0a\x98\x66\x15\xe9\xf8\xd8\xf9\x00\x69\x52\xa2\xed\x0a\xca\x36\xbc\x6f\xfa\xa3\xb6\x96\x31\xc6\x5a\xd9\x19\x7e\x94\xac\x95\x9c\x0b\xae\x3a\xd4\xa2\x69\x7b\xc1\x79\x67\x35\xd3\x52\x6b\xc1\x58\x8b\x9f\x0c\x45\xcb\x50\x61\xc3\xfb\x1d\xb8\x9d\xc9\xf6\x71\x26\x45\x10\x7a\x5b\x84\x90\x77\x59\x8b\x32\x37\x35\x62\xfa\x4b\x15\xd9\xd7\x9c\x9d\x76\x26\xf8\xf5\x95\xc2\x82\x3e\xa5\xf9\x15\x1e\xb3\xd3\xef\xe4\x9f\x00\x00\x00\xff\xff\xf4\xd4\xac\xa0\x86\x01\x00\x00")

func ruby271NixBytes() ([]byte, error) {
	return bindataRead(
		_ruby271Nix,
		"ruby/2.7.1.nix",
	)
}

func ruby271Nix() (*asset, error) {
	bytes, err := ruby271NixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.7.1.nix", size: 390, mode: os.FileMode(420), modTime: time.Unix(1594085611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rubyDefaultNix = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\x8a\xf3\x20\x14\x86\xf7\x5e\xc5\x21\xdf\xe6\x9b\x45\x8d\xda\x24\x66\x5a\xba\x98\x2b\x09\xfe\x9c\x26\xd2\xa0\x41\x6d\x60\x5a\x72\xef\x83\x29\x03\x5d\xcc\x46\x7c\x5f\xe4\xf1\x9c\xe7\xdf\xf3\x09\x16\xaf\xce\x23\x54\x16\xa3\x5b\x55\x76\xc1\x57\xb0\x6d\x64\x0e\xc1\x1f\xe2\x5d\x7f\x1f\xc4\x20\x07\x0e\x17\x58\x6e\x63\xa2\xa5\x19\xc4\x20\x69\x58\x31\x46\x67\xf1\x2b\xe7\x98\xfe\xab\x72\x9e\xe0\x49\x00\x56\x8c\xc9\x05\x0f\x17\xa8\x04\x95\x94\x57\x67\x02\x90\xa2\xf9\x25\x5c\x31\x9b\xe9\x1e\xe7\xfd\x31\x40\xb9\x5d\xa0\x9a\x72\x5e\xd2\xa9\xae\x8d\x32\x13\xee\xbf\x1c\x66\xe5\x47\x1a\xe2\x58\x2f\x77\x5d\x97\xa6\x16\x54\xd6\xaf\x91\x0a\x98\x66\x15\xe9\xf8\xd8\xf9\x00\x69\x52\xa2\xed\x0a\xca\x36\xbc\x6f\xfa\xa3\xb6\x96\x31\xc6\x5a\xd9\x19\x7e\x94\xac\x95\x9c\x0b\xae\x3a\xd4\xa2\x69\x7b\xc1\x79\x67\x35\xd3\x52\x6b\xc1\x58\x8b\x9f\x0c\x45\xcb\x50\x61\xc3\xfb\x1d\xb8\x9d\xc9\xf6\x71\x26\x45\x10\x7a\x5b\x84\x90\x77\x59\x8b\x32\x37\x35\x62\xfa\x4b\x15\xd9\xd7\x9c\x9d\x76\x26\xf8\xf5\x95\xc2\x82\x3e\xa5\xf9\x15\x1e\xb3\xd3\xef\xe4\x9f\x00\x00\x00\xff\xff\xf4\xd4\xac\xa0\x86\x01\x00\x00")

func rubyDefaultNixBytes() ([]byte, error) {
	return bindataRead(
		_rubyDefaultNix,
		"ruby/default.nix",
	)
}

func rubyDefaultNix() (*asset, error) {
	bytes, err := rubyDefaultNixBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/default.nix", size: 390, mode: os.FileMode(420), modTime: time.Unix(1594085611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"crystal/0.35.1.nix":     crystal0351Nix,
	"crystal/default.nix":    crystalDefaultNix,
	"golang/1.13.12.nix":     golang11312Nix,
	"golang/1.14.4.nix":      golang1144Nix,
	"golang/default.nix":     golangDefaultNix,
	"memcached/1.6.5.nix":    memcached165Nix,
	"memcached/1.6.6.nix":    memcached166Nix,
	"memcached/default.nix":  memcachedDefaultNix,
	"mysql/8.0.17.nix":       mysql8017Nix,
	"mysql/8.0.21.nix":       mysql8021Nix,
	"mysql/default.nix":      mysqlDefaultNix,
	"node/12.18.1.nix":       node12181Nix,
	"node/12.18.2.nix":       node12182Nix,
	"node/14.4.0.nix":        node1440Nix,
	"node/14.5.0.nix":        node1450Nix,
	"node/default.nix":       nodeDefaultNix,
	"postgresql/10.13.nix":   postgresql1013Nix,
	"postgresql/11.8.nix":    postgresql118Nix,
	"postgresql/12.3.nix":    postgresql123Nix,
	"postgresql/9.5.22.nix":  postgresql9522Nix,
	"postgresql/9.6.18.nix":  postgresql9618Nix,
	"postgresql/default.nix": postgresqlDefaultNix,
	"redis/6.0.4.nix":        redis604Nix,
	"redis/6.0.5.nix":        redis605Nix,
	"redis/default.nix":      redisDefaultNix,
	"ruby/2.6.6.nix":         ruby266Nix,
	"ruby/2.7.1.nix":         ruby271Nix,
	"ruby/default.nix":       rubyDefaultNix,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"crystal": &bintree{nil, map[string]*bintree{
		"0.35.1.nix":  &bintree{crystal0351Nix, map[string]*bintree{}},
		"default.nix": &bintree{crystalDefaultNix, map[string]*bintree{}},
	}},
	"golang": &bintree{nil, map[string]*bintree{
		"1.13.12.nix": &bintree{golang11312Nix, map[string]*bintree{}},
		"1.14.4.nix":  &bintree{golang1144Nix, map[string]*bintree{}},
		"default.nix": &bintree{golangDefaultNix, map[string]*bintree{}},
	}},
	"memcached": &bintree{nil, map[string]*bintree{
		"1.6.5.nix":   &bintree{memcached165Nix, map[string]*bintree{}},
		"1.6.6.nix":   &bintree{memcached166Nix, map[string]*bintree{}},
		"default.nix": &bintree{memcachedDefaultNix, map[string]*bintree{}},
	}},
	"mysql": &bintree{nil, map[string]*bintree{
		"8.0.17.nix":  &bintree{mysql8017Nix, map[string]*bintree{}},
		"8.0.21.nix":  &bintree{mysql8021Nix, map[string]*bintree{}},
		"default.nix": &bintree{mysqlDefaultNix, map[string]*bintree{}},
	}},
	"node": &bintree{nil, map[string]*bintree{
		"12.18.1.nix": &bintree{node12181Nix, map[string]*bintree{}},
		"12.18.2.nix": &bintree{node12182Nix, map[string]*bintree{}},
		"14.4.0.nix":  &bintree{node1440Nix, map[string]*bintree{}},
		"14.5.0.nix":  &bintree{node1450Nix, map[string]*bintree{}},
		"default.nix": &bintree{nodeDefaultNix, map[string]*bintree{}},
	}},
	"postgresql": &bintree{nil, map[string]*bintree{
		"10.13.nix":   &bintree{postgresql1013Nix, map[string]*bintree{}},
		"11.8.nix":    &bintree{postgresql118Nix, map[string]*bintree{}},
		"12.3.nix":    &bintree{postgresql123Nix, map[string]*bintree{}},
		"9.5.22.nix":  &bintree{postgresql9522Nix, map[string]*bintree{}},
		"9.6.18.nix":  &bintree{postgresql9618Nix, map[string]*bintree{}},
		"default.nix": &bintree{postgresqlDefaultNix, map[string]*bintree{}},
	}},
	"redis": &bintree{nil, map[string]*bintree{
		"6.0.4.nix":   &bintree{redis604Nix, map[string]*bintree{}},
		"6.0.5.nix":   &bintree{redis605Nix, map[string]*bintree{}},
		"default.nix": &bintree{redisDefaultNix, map[string]*bintree{}},
	}},
	"ruby": &bintree{nil, map[string]*bintree{
		"2.6.6.nix":   &bintree{ruby266Nix, map[string]*bintree{}},
		"2.7.1.nix":   &bintree{ruby271Nix, map[string]*bintree{}},
		"default.nix": &bintree{rubyDefaultNix, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
