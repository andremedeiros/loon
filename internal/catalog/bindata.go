// Code generated by go-bindata. DO NOT EDIT.
// sources:
// internal/catalog/golang/1.13.12.json (189B)
// internal/catalog/golang/1.14.4.json (207B)
// internal/catalog/memcached/1.6.5.json (195B)
// internal/catalog/memcached/1.6.6.json (215B)
// internal/catalog/mysql/8.0.17.json (214B)
// internal/catalog/postgresql/10.13.json (202B)
// internal/catalog/postgresql/11.8.json (199B)
// internal/catalog/postgresql/12.3.json (231B)
// internal/catalog/postgresql/9.5.22.json (205B)
// internal/catalog/postgresql/9.6.18.json (205B)
// internal/catalog/redis/6.0.4.json (213B)
// internal/catalog/ruby/2.6.6.json (198B)
// internal/catalog/ruby/2.7.1.json (218B)

package catalog

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _golang11312Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x4b\x6e\xc4\x20\x10\x04\xd0\x3d\xa7\x68\xb1\x8e\xc0\x7c\x6c\xc0\xb7\xc1\xdd\x18\x47\x22\x26\x02\x27\x8b\x19\xf9\xee\x23\xcf\x67\x59\x55\x7a\x75\x67\x00\x3c\xd7\x12\xf7\xcc\x67\xb8\x12\x00\xff\x4f\xad\x7f\xd7\x9d\xcf\xc0\x95\x50\x46\x28\xcd\xbf\x5e\xcb\x5f\x2b\x57\xbb\x1d\xc7\x6f\x9f\xa5\xa4\x22\x72\xad\xb9\x24\x81\xf5\x47\xe6\x2a\x73\x7d\x03\xd1\x1b\x8a\x23\x36\x91\x6f\x1f\xdb\xb7\xa8\xc7\xe9\x79\xea\x96\xa8\xd1\x52\xb2\xe4\xbc\x0b\x26\x6a\x85\x38\x8d\x81\x42\x18\xdc\x6a\xcd\x38\x21\x05\xf4\x94\xfc\xe2\x68\xf0\x21\x20\x25\xc2\xb4\x3a\xa5\xd3\x12\x8d\xe5\x0c\xe0\x64\x27\x7b\x04\x00\x00\xff\xff\x01\xa6\xcf\x0d\xbd\x00\x00\x00")

func golang11312JsonBytes() ([]byte, error) {
	return bindataRead(
		_golang11312Json,
		"golang/1.13.12.json",
	)
}

func golang11312Json() (*asset, error) {
	bytes, err := golang11312JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.13.12.json", size: 189, mode: os.FileMode(0644), modTime: time.Unix(1591831486, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0xc6, 0x11, 0xc1, 0x5a, 0xda, 0x8c, 0xdc, 0x20, 0x5c, 0x0, 0xba, 0xa7, 0x6e, 0x3c, 0x84, 0xf4, 0xe7, 0xd7, 0x2f, 0x69, 0xb1, 0x37, 0xb1, 0x98, 0x6b, 0x9, 0xac, 0x32, 0xe5, 0x17, 0x7b}}
	return a, nil
}

var _golang1144Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x4b\x6a\xc5\x20\x14\x86\xe7\xae\xe2\xe0\xb8\xf8\xba\x7a\x63\xdd\xcd\x51\x4f\x4c\xc1\xc6\xa2\xa6\x83\x96\xec\xbd\x84\xd0\x3b\xfc\x1f\x1f\x7c\xbf\x0c\x80\x97\x56\x71\x2f\x3c\xc0\x95\x00\xf8\x37\xf5\xf1\xd1\x76\x1e\x80\x6b\xa1\xad\xb0\xfc\xed\x1e\x8e\x5e\xaf\x72\x9b\xf3\x6b\x04\x29\x73\x15\xa5\xb5\x52\x49\xa4\xf6\x29\x4b\x93\xa5\xdd\x7f\x31\x7a\x12\x13\xbb\x28\x3f\xff\xe8\xd8\xd0\xb8\xe7\x45\x2f\x4a\x6b\x5c\x1f\x31\x26\x83\x49\x2b\x9f\x75\xf4\x86\xd0\x63\x8c\x7e\x89\x86\x9e\x8f\x75\xf1\xde\xda\x55\x19\xf7\x1e\xc9\xa8\x94\xc9\x66\x6b\x92\x4b\x56\x39\xff\x92\xa9\x38\x69\x4c\x1e\x60\xf6\x83\x18\xc0\xc9\x4e\xf6\x17\x00\x00\xff\xff\x6d\x22\xd1\x66\xcf\x00\x00\x00")

func golang1144JsonBytes() ([]byte, error) {
	return bindataRead(
		_golang1144Json,
		"golang/1.14.4.json",
	)
}

func golang1144Json() (*asset, error) {
	bytes, err := golang1144JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "golang/1.14.4.json", size: 207, mode: os.FileMode(0644), modTime: time.Unix(1591831602, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0xeb, 0x9e, 0x4d, 0x1f, 0xb, 0x42, 0x65, 0x96, 0xeb, 0xe0, 0xfd, 0xb2, 0xf8, 0xcc, 0xef, 0x4b, 0x5f, 0x6f, 0x8d, 0x97, 0xb4, 0x55, 0xd, 0x6, 0x24, 0xce, 0xc6, 0x5e, 0x19, 0xdb, 0x6e}}
	return a, nil
}

var _memcached165Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xd1\x0e\x82\x20\x14\x80\xe1\x7b\x9e\xe2\x8c\xeb\x42\x90\x04\xf4\x6d\xe0\x70\x50\x37\xcd\x06\xd6\x45\xcd\x77\x6f\xda\xaa\xdb\x6f\xfb\xff\x17\x03\xe0\x33\xcd\xe8\x71\xa0\xc8\x3b\xd8\x01\x80\x3f\x28\x97\x71\xb9\xf2\x0e\xb8\x12\x46\x34\xfc\xf4\xf1\x7b\x9e\x76\x1b\xd6\xf5\x56\xba\xaa\xfa\x95\x62\xc9\x7d\x95\xc6\x89\xca\xdf\xce\x47\x29\x56\x9f\x45\xff\xfc\x0e\xca\xe0\xeb\xc6\x1c\xdf\x74\x89\x5e\x5b\x69\x12\x2a\x8d\x5a\x07\x6a\x63\x6a\x6d\xa8\x51\xa1\x8b\x36\x48\xd7\xaa\xd8\x24\x19\xd1\x39\x4f\x01\x8d\xd4\x18\x94\x75\x64\x5c\xa8\x6d\x4c\x9c\x01\x6c\x6c\x63\xef\x00\x00\x00\xff\xff\xa8\xff\x7b\x65\xc3\x00\x00\x00")

func memcached165JsonBytes() ([]byte, error) {
	return bindataRead(
		_memcached165Json,
		"memcached/1.6.5.json",
	)
}

func memcached165Json() (*asset, error) {
	bytes, err := memcached165JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "memcached/1.6.5.json", size: 195, mode: os.FileMode(0644), modTime: time.Unix(1592261973, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0xab, 0xe1, 0x72, 0xe0, 0x13, 0x8e, 0xa7, 0xce, 0xd8, 0x50, 0xd2, 0x62, 0x8c, 0x3f, 0x59, 0x1b, 0x1d, 0x8, 0x37, 0xf, 0xad, 0x28, 0xef, 0x66, 0xb8, 0xd2, 0xb3, 0xcf, 0xee, 0xf8, 0x3c}}
	return a, nil
}

var _memcached166Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x4d\x4e\xc3\x30\x10\x40\xe1\xbd\x4f\x31\xf2\x1a\x1c\xd7\x7f\x8d\x7d\x9b\x61\x32\xd3\x54\x4a\x09\xb2\x1d\x16\xa0\xdc\x1d\x05\x14\xba\xfd\xa4\xf7\xbe\x15\x80\x7e\xf0\x83\x90\x66\x9e\x74\x81\x03\x00\xf4\x27\xd7\x76\x5f\xdf\x75\x01\x7d\x31\xc9\x24\xfd\xf2\xe7\x5b\x5d\x0e\x9b\x7b\xff\x68\x65\x18\xfe\x4b\xb3\xd6\xdb\x20\xf7\x85\xdb\xd3\x5e\x7f\x4b\xd3\xb1\x9a\xdb\xd7\x39\x68\x33\xba\x98\x8e\x47\xb6\xa3\x58\x66\x12\x8c\x31\x5f\x5c\xa6\xcc\x21\xf0\x44\x21\x89\x75\x7c\xf5\x28\x3c\x0a\x12\xfa\x18\xdf\x02\x0b\x45\x1a\xd3\x94\xad\x13\xf2\xec\x9d\x5c\xcf\xe3\x82\x9d\x5b\xd7\x05\x7a\xdd\x58\x01\xec\x6a\x57\x3f\x01\x00\x00\xff\xff\x0b\x1f\x09\xa8\xd7\x00\x00\x00")

func memcached166JsonBytes() ([]byte, error) {
	return bindataRead(
		_memcached166Json,
		"memcached/1.6.6.json",
	)
}

func memcached166Json() (*asset, error) {
	bytes, err := memcached166JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "memcached/1.6.6.json", size: 215, mode: os.FileMode(0644), modTime: time.Unix(1591831372, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xb2, 0x24, 0xb3, 0x1b, 0x29, 0x8d, 0xad, 0x15, 0x9, 0xe9, 0xde, 0x62, 0x68, 0x26, 0xbc, 0xc1, 0xee, 0xfb, 0x71, 0x4f, 0xdf, 0x15, 0xfc, 0xfd, 0xa7, 0xdf, 0x98, 0xa5, 0x3d, 0x5b, 0xa5}}
	return a, nil
}

var _mysql8017Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x6e\xc3\x20\x10\xc6\xf1\x9d\xa7\x38\x31\x37\x80\xa3\x1a\x08\x73\xc7\x76\xa8\xfa\x04\x34\x58\x0e\x0e\x86\xe6\x20\x69\x70\xe5\x77\xaf\x6c\xcb\xe3\xdd\x5f\xdf\xef\x8f\x00\xd0\xb1\xe6\x5b\xd0\x82\x1a\x58\x4e\x00\xfa\xe8\x30\xfb\x14\xa9\x01\xaa\x99\x60\x8d\xa2\x2f\x5b\xb8\x63\x58\x9e\x97\x52\x7e\xb2\xe1\xfc\xec\x22\x5b\xc7\xec\x9c\x46\xce\xdf\xd2\x6f\x0c\xc9\xba\xcc\x3f\xea\xd7\xe7\xfb\x41\x33\xc1\xd7\x7c\xd8\x14\x56\x2c\xb2\x7e\xda\xb1\x7c\xb1\xc7\x56\x2e\x5e\x33\x0e\x18\x9e\x51\x3f\x7c\xef\xe5\x09\x05\x4a\xf5\x3a\x1c\x9d\xff\x76\xf1\x6a\x2d\x8a\x66\xf0\xed\x49\xb6\x7d\xae\x4f\x75\x95\x62\x52\xb7\x2a\x77\x25\xd8\xd2\xe5\x42\x0d\x14\xbc\x77\x04\x60\x26\x33\xf9\x0f\x00\x00\xff\xff\xc0\xdd\xfb\x46\xd6\x00\x00\x00")

func mysql8017JsonBytes() ([]byte, error) {
	return bindataRead(
		_mysql8017Json,
		"mysql/8.0.17.json",
	)
}

func mysql8017Json() (*asset, error) {
	bytes, err := mysql8017JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/8.0.17.json", size: 214, mode: os.FileMode(0644), modTime: time.Unix(1592264964, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x99, 0xc4, 0xd0, 0x90, 0x80, 0xe0, 0xcf, 0x6d, 0x7, 0x68, 0x68, 0x35, 0xcf, 0xe5, 0x0, 0x2f, 0xe8, 0x59, 0xe6, 0x75, 0x47, 0x1d, 0x1f, 0x4a, 0xca, 0xf6, 0xb7, 0x53, 0x36, 0x4d, 0x65}}
	return a, nil
}

var _postgresql1013Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x4d\x0e\x83\x20\x10\x46\xf7\x9c\x62\x32\xeb\x16\xd4\x46\x8d\xde\x06\xff\xc0\x84\x0a\x0e\xa8\xc1\xc6\xbb\x37\xda\x34\x6e\x5f\xde\xfb\xbe\x0f\x03\x40\x67\x7d\x50\xd4\xfb\xd9\x60\x0d\x27\x01\xc0\xb5\x27\x3f\xda\x09\x6b\xc0\x34\xe1\xe9\x0b\x1f\x3f\xbe\xd0\x29\xa1\x0e\xc1\xf9\x5a\x88\x21\x38\x7e\xe7\xdc\x92\x12\x6e\x69\x84\xb7\x0b\xb5\xbd\x58\xaf\x54\xdc\xc2\xf3\x02\x3c\x48\xe2\x6a\xff\x4f\x7a\x2d\xb3\xbc\xb8\x9e\x66\x69\x92\xe8\x4a\x59\x25\x71\x8f\xb2\xd4\x26\x2f\x94\x7f\x6f\xf9\xb0\xca\xd6\x19\xea\xb4\x9b\x4a\x5d\xa9\xa9\x89\x94\x8e\xd9\x18\xb7\xac\x43\x06\x70\xb0\x83\x7d\x03\x00\x00\xff\xff\x5f\x36\x86\x3f\xca\x00\x00\x00")

func postgresql1013JsonBytes() ([]byte, error) {
	return bindataRead(
		_postgresql1013Json,
		"postgresql/10.13.json",
	)
}

func postgresql1013Json() (*asset, error) {
	bytes, err := postgresql1013JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/10.13.json", size: 202, mode: os.FileMode(0644), modTime: time.Unix(1592433269, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0xd9, 0x7, 0x35, 0xab, 0x5b, 0xf2, 0x48, 0x2e, 0xee, 0x6e, 0x8e, 0x38, 0x24, 0x2c, 0x80, 0xe3, 0x12, 0x2d, 0x3c, 0x4a, 0xa8, 0x86, 0x8d, 0x81, 0xdb, 0xe2, 0xc5, 0x2b, 0x58, 0x60, 0x57}}
	return a, nil
}

var _postgresql118Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x5b\x72\x83\x30\x0c\x45\xff\xbd\x0a\x8d\xbe\x5b\xbb\xf4\xc1\x14\x76\x63\x5c\x6a\x03\x01\xdb\x92\x79\x25\xc3\xde\x33\x4e\x26\xc3\xa7\x8e\xee\xb9\xf7\x26\x00\x30\x78\x4e\x96\x5a\x8e\x17\xac\x21\x13\x00\x5c\x5a\xe2\xce\x4f\x58\x03\x16\x85\xfc\xc5\xb7\x27\x9e\x29\x67\xd0\xa5\x14\xb8\x56\xea\x3f\x05\x79\xda\xd2\x93\x55\x61\x6e\x14\xfb\x99\x4c\xab\x96\x6c\xaa\xf3\xff\x9e\x6f\x99\x34\x49\x7b\x7d\x15\xb2\xd3\x9f\x3f\xe5\x63\x26\x0e\x1c\x77\xbd\x6f\xe3\x64\xcc\xd8\xe8\x60\xbf\x74\xcf\x6b\x15\x7a\x1b\x17\xfd\xd1\x4d\x5b\xef\xb6\xf2\x9b\xe2\x5f\x69\x06\x47\xb6\x5a\x83\x46\x01\x70\x88\x43\xdc\x03\x00\x00\xff\xff\xaa\x4b\x9b\x8f\xc7\x00\x00\x00")

func postgresql118JsonBytes() ([]byte, error) {
	return bindataRead(
		_postgresql118Json,
		"postgresql/11.8.json",
	)
}

func postgresql118Json() (*asset, error) {
	bytes, err := postgresql118JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/11.8.json", size: 199, mode: os.FileMode(0644), modTime: time.Unix(1592433216, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x85, 0x9a, 0x6a, 0xec, 0xd0, 0xcc, 0x4f, 0x34, 0xd, 0x4f, 0x8, 0x7d, 0x34, 0x47, 0xac, 0xbe, 0x18, 0x44, 0x65, 0xd9, 0x30, 0xb0, 0x87, 0x5, 0xa3, 0x22, 0xec, 0x2e, 0x79, 0x3, 0x16, 0x98}}
	return a, nil
}

var _postgresql123Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\xc1\x6e\x83\x30\x0c\x86\xef\x3c\x85\xe5\xf3\x96\x40\x5c\x27\xc0\xdb\x18\x9a\xd0\x49\xd5\x60\x89\xd3\xc3\xa6\xbe\xfb\x14\x55\x15\x47\x7f\xfe\xbf\xef\xaf\x03\xc0\x63\x2f\xba\xe5\x58\x7e\xee\x38\x43\x23\x00\xf8\x88\xb9\x7c\xed\xdf\x38\x03\x0e\xce\x10\x7e\xbc\x70\xcd\x6d\x83\x37\xd5\xa3\xcc\xd6\x26\x3d\xcc\x69\x9b\x3d\x6f\xf6\xa8\x8b\x2d\x7b\xcd\x6b\xb4\x8f\x66\xda\xf3\xff\xd9\x6e\xa3\x92\xcd\xf6\xfb\x0e\x96\x9b\x38\xf6\xad\x19\xfa\x31\x5d\x79\x21\x27\x53\xe0\x10\x7c\x98\xae\xb4\x0e\x34\xba\xcb\xea\x89\x26\xf2\x69\x1c\xbd\x04\xa2\xb4\x32\xcb\xc2\x32\xb9\x4b\xbf\xf8\x81\x65\xe8\x39\x71\xff\x2e\xde\x45\x63\x51\x9c\x41\x73\x8d\x1d\xc0\xb3\x7b\x76\xff\x01\x00\x00\xff\xff\xfe\x3d\xba\xb3\xe7\x00\x00\x00")

func postgresql123JsonBytes() ([]byte, error) {
	return bindataRead(
		_postgresql123Json,
		"postgresql/12.3.json",
	)
}

func postgresql123Json() (*asset, error) {
	bytes, err := postgresql123JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/12.3.json", size: 231, mode: os.FileMode(0644), modTime: time.Unix(1591837363, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7f, 0x8f, 0xad, 0x21, 0xab, 0x74, 0xca, 0xbe, 0xa5, 0x23, 0x11, 0xfc, 0xca, 0x7b, 0xf6, 0x18, 0x6c, 0xc4, 0x5c, 0xbf, 0x70, 0xbb, 0xed, 0x41, 0xb, 0x5, 0x70, 0xc2, 0x22, 0x77, 0x23, 0x5c}}
	return a, nil
}

var _postgresql9522Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x4d\x6e\x85\x20\x14\x46\xe7\xac\xe2\xe6\x8e\x5b\x78\xfe\x60\xd0\xdd\x50\xab\x28\x51\xc0\x0b\xd2\xd8\xc6\xbd\x37\xc6\xbc\x38\xfd\xbe\x73\xce\x1f\x03\xc0\xe0\x63\x32\x34\xc4\x6d\xc1\x0e\xae\x05\x00\xf3\x40\x71\xf6\x0e\x3b\xc0\x96\x4b\x5e\x96\xf8\x71\x1f\x3b\x5d\x14\x4e\x29\x85\xd8\x09\x31\xa6\xc0\x1f\x9f\x7b\x32\x22\xec\x5f\x22\xfa\x9d\xfa\x41\xe4\xdb\x15\x0f\xf1\x79\x2f\x3c\x69\xe2\xe6\xf7\x1d\x8d\x93\x2e\x65\x73\x75\x5f\x55\xae\xbf\x6b\x47\xed\xa8\x9a\xe3\x35\x17\x56\xda\x35\x8f\xda\xc9\x1f\x75\xd4\x46\x17\xab\x26\xd9\x2e\x53\xef\x6c\x65\x17\xb9\x49\xb5\x6a\x85\x0c\xe0\x64\x27\xfb\x0f\x00\x00\xff\xff\x1a\x8a\x71\xab\xcd\x00\x00\x00")

func postgresql9522JsonBytes() ([]byte, error) {
	return bindataRead(
		_postgresql9522Json,
		"postgresql/9.5.22.json",
	)
}

func postgresql9522Json() (*asset, error) {
	bytes, err := postgresql9522JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/9.5.22.json", size: 205, mode: os.FileMode(0644), modTime: time.Unix(1592433383, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x55, 0x81, 0x84, 0xd8, 0x62, 0x2b, 0x14, 0xa, 0x1d, 0x6, 0x57, 0x86, 0xb3, 0xd9, 0x90, 0x67, 0x96, 0xc7, 0x81, 0x75, 0xd6, 0x68, 0x4d, 0xc9, 0xf1, 0x73, 0x4e, 0x70, 0x62, 0x78, 0x4a}}
	return a, nil
}

var _postgresql9618Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8c\x5d\x6e\x86\x20\x10\x45\xdf\x59\xc5\x64\x9e\x5b\x50\x13\xb5\xba\x1b\xfc\x03\x13\x2a\x38\x83\x1a\x6c\xdc\x7b\x63\xcc\x17\x5f\xef\x3d\xe7\xfc\x09\x00\x0c\x9e\xa3\xa1\x91\x57\x87\x2d\xdc\x0b\x00\xee\x23\xf1\xec\x17\x6c\x01\x1b\x59\xc9\xfc\x07\xbf\x9e\x63\xa3\x9b\x42\x1b\x63\xe0\x56\xa9\x29\x06\xf9\xfa\xd2\x93\x51\x61\xeb\x14\xfb\x8d\xfa\x51\xed\x8f\xab\x5e\xe2\xfb\x59\x64\xd4\x24\xcd\xf9\x89\xb2\xd5\x45\x59\xdd\xdd\x7c\xd5\x2e\x4b\xa1\xd6\x4d\x96\xce\xa4\x6b\xeb\xca\xca\xf0\xef\x51\x4e\xbb\xee\x83\xa3\xc1\x86\xa5\xb6\x8d\x59\xba\x44\xf9\x5c\xcc\xe9\x28\x06\x14\x00\x97\xb8\xc4\x7f\x00\x00\x00\xff\xff\xb5\x6b\x6a\xe9\xcd\x00\x00\x00")

func postgresql9618JsonBytes() ([]byte, error) {
	return bindataRead(
		_postgresql9618Json,
		"postgresql/9.6.18.json",
	)
}

func postgresql9618Json() (*asset, error) {
	bytes, err := postgresql9618JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgresql/9.6.18.json", size: 205, mode: os.FileMode(0644), modTime: time.Unix(1592433346, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0xc0, 0x7f, 0x90, 0x43, 0x6c, 0x60, 0x9d, 0xf3, 0xbc, 0xfb, 0xa0, 0x86, 0x0, 0x94, 0x8d, 0x63, 0x16, 0x89, 0x28, 0xf2, 0x19, 0x5e, 0x1a, 0x73, 0x7a, 0xbd, 0x3, 0x83, 0xba, 0xfa, 0xd9}}
	return a, nil
}

var _redis604Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x5b\x6a\xc3\x30\x10\x85\xe1\x77\xaf\x62\xd0\x73\xab\x8b\x47\xd6\x6d\x37\x13\x69\xda\x18\x44\x54\x24\xa5\x85\x96\xec\xbd\xd8\x21\x8f\xe7\x87\xf3\xfd\x2d\x00\xa2\x73\xd9\x87\x48\x70\x0c\x00\xf1\xcd\x7d\xec\xed\x26\x12\x08\x27\xb5\xb4\xe2\xed\xd9\xef\xbd\x1e\xed\x3a\xe7\x57\x52\xaa\xb4\x9f\x5b\x6d\x54\xe4\xf9\x96\x7b\x53\x9d\x2b\xd3\xe0\xa1\xce\xf2\x7e\x7e\xe5\xa4\x2e\x3f\x7f\x5f\xc4\xb8\xd2\xba\xb9\x43\x41\x44\xaf\xf5\x46\x86\x75\x46\xa2\x35\x62\x0e\x3e\xa3\x41\xeb\x3c\x53\xa0\x6c\x4c\x0c\x36\xae\xe6\x83\x2e\x3a\x04\xed\x63\x0c\x17\xf2\x6e\xcb\x31\x5a\x2c\xfc\x12\x2b\x4d\x1e\x53\x24\x98\xfd\xce\x0b\xc0\x63\x79\x2c\xff\x01\x00\x00\xff\xff\x58\xc2\xf3\xf2\xd5\x00\x00\x00")

func redis604JsonBytes() ([]byte, error) {
	return bindataRead(
		_redis604Json,
		"redis/6.0.4.json",
	)
}

func redis604Json() (*asset, error) {
	bytes, err := redis604JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "redis/6.0.4.json", size: 213, mode: os.FileMode(0644), modTime: time.Unix(1591829878, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0xfa, 0x2e, 0x87, 0x2b, 0xd2, 0xf9, 0x8b, 0x99, 0xed, 0xce, 0x9a, 0x3c, 0xbf, 0xb5, 0x3e, 0xb4, 0xc6, 0x22, 0xc3, 0xb5, 0x89, 0x79, 0xb4, 0xf4, 0xd1, 0xb3, 0xdc, 0xc1, 0xf4, 0x79, 0xc6}}
	return a, nil
}

var _ruby266Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xdd\x6a\x84\x30\x10\xc5\xf1\xfb\x3c\xc5\x90\xeb\x6e\xbe\x33\x41\xdf\x66\x26\x89\x5a\x58\x56\x89\x5a\x68\x8b\xef\x5e\x62\xd9\xbb\xc3\x1f\xce\xef\x57\x00\xc8\x76\xf2\xb7\x1c\xa1\x6f\x00\xf9\x55\xdb\xfe\xb9\xbe\xe4\x08\xd2\x29\x54\x28\x3f\xfe\xfb\xd9\x9e\xbd\x2d\xc7\xb1\xed\xa3\xd6\x99\xf2\x52\x55\xbf\x3e\x9e\xf4\x9a\xd5\xda\x66\xbd\x9d\xac\x7b\xd1\x4e\xe1\x3d\x1e\xb7\xa0\x0e\x6a\x6a\xfe\x79\x43\xfb\x42\x2e\x62\xb7\x3c\x06\xb6\xc1\x97\x3a\x79\x34\x4c\xd9\x72\x0a\x95\x23\xd6\x82\x86\x2d\x99\x92\x09\x83\x1f\xd8\x18\x1b\x13\x55\x6b\xa7\x29\xa5\x12\x73\x71\x75\x70\x6e\xb0\x52\x00\x5c\xe2\x12\x7f\x01\x00\x00\xff\xff\xc8\x18\x25\x82\xc6\x00\x00\x00")

func ruby266JsonBytes() ([]byte, error) {
	return bindataRead(
		_ruby266Json,
		"ruby/2.6.6.json",
	)
}

func ruby266Json() (*asset, error) {
	bytes, err := ruby266JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.6.6.json", size: 198, mode: os.FileMode(0644), modTime: time.Unix(1591831101, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x18, 0x6e, 0xdd, 0xfd, 0x3e, 0x54, 0xa2, 0x91, 0x31, 0x6f, 0x43, 0x93, 0x37, 0x81, 0x92, 0x71, 0x6d, 0x44, 0x57, 0xf0, 0x37, 0xa, 0x1c, 0x46, 0xb4, 0xaf, 0xb, 0x15, 0x75, 0x33, 0x14}}
	return a, nil
}

var _ruby271Json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xdd\x6a\xc3\x30\x0c\xc5\xf1\xfb\x3c\x85\xf0\xf5\x6a\x4b\x6a\x1c\x67\x79\x1b\x2b\x16\xc9\x20\xb4\xc5\x1f\x83\x6d\xf4\xdd\x87\x5b\x72\x77\xf8\xc3\xf9\xfd\x0d\x00\x26\x37\xf9\x31\x0b\xf4\x0d\x60\xbe\x35\x97\xaf\xfb\xcd\x2c\x60\xd8\x06\x4b\xe6\xe3\xdd\x5b\x3e\x7a\xdb\x6b\x7d\x94\xc5\xb9\x35\xae\xbb\xda\x7e\xbd\x1c\xf1\xb6\xd9\x7b\xde\xdc\xa3\x89\xeb\xc5\xb1\x0d\xaf\x71\x79\x09\xb6\xc6\x6c\xb7\xdf\x13\x2a\x7b\x64\x3f\x75\x2b\x8d\x34\x8f\xf3\x55\x52\x42\x44\xf4\x61\x5a\xe9\x1a\xd0\x07\x22\xa6\x38\xa9\xf0\xe8\x67\x26\x9a\x92\xa0\x04\x11\x46\xf4\xfa\x89\xca\x1e\x35\xea\x48\xf3\x29\x1e\xb1\x6a\xa9\x66\x81\x9a\x9b\x0e\x00\xcf\xe1\x39\xfc\x07\x00\x00\xff\xff\x7f\x81\xcf\x8f\xda\x00\x00\x00")

func ruby271JsonBytes() ([]byte, error) {
	return bindataRead(
		_ruby271Json,
		"ruby/2.7.1.json",
	)
}

func ruby271Json() (*asset, error) {
	bytes, err := ruby271JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ruby/2.7.1.json", size: 218, mode: os.FileMode(0644), modTime: time.Unix(1591831228, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd5, 0x30, 0x1e, 0x5d, 0x4e, 0x0, 0x72, 0x5b, 0x70, 0x1b, 0xe9, 0xbd, 0x61, 0x65, 0x58, 0xfb, 0x80, 0x19, 0x45, 0x47, 0x56, 0x88, 0x50, 0xe5, 0x62, 0x8a, 0x3b, 0x91, 0xcd, 0x1, 0x81, 0xae}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"golang/1.13.12.json":    golang11312Json,
	"golang/1.14.4.json":     golang1144Json,
	"memcached/1.6.5.json":   memcached165Json,
	"memcached/1.6.6.json":   memcached166Json,
	"mysql/8.0.17.json":      mysql8017Json,
	"postgresql/10.13.json":  postgresql1013Json,
	"postgresql/11.8.json":   postgresql118Json,
	"postgresql/12.3.json":   postgresql123Json,
	"postgresql/9.5.22.json": postgresql9522Json,
	"postgresql/9.6.18.json": postgresql9618Json,
	"redis/6.0.4.json":       redis604Json,
	"ruby/2.6.6.json":        ruby266Json,
	"ruby/2.7.1.json":        ruby271Json,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"golang": &bintree{nil, map[string]*bintree{
		"1.13.12.json": &bintree{golang11312Json, map[string]*bintree{}},
		"1.14.4.json":  &bintree{golang1144Json, map[string]*bintree{}},
	}},
	"memcached": &bintree{nil, map[string]*bintree{
		"1.6.5.json": &bintree{memcached165Json, map[string]*bintree{}},
		"1.6.6.json": &bintree{memcached166Json, map[string]*bintree{}},
	}},
	"mysql": &bintree{nil, map[string]*bintree{
		"8.0.17.json": &bintree{mysql8017Json, map[string]*bintree{}},
	}},
	"postgresql": &bintree{nil, map[string]*bintree{
		"10.13.json":  &bintree{postgresql1013Json, map[string]*bintree{}},
		"11.8.json":   &bintree{postgresql118Json, map[string]*bintree{}},
		"12.3.json":   &bintree{postgresql123Json, map[string]*bintree{}},
		"9.5.22.json": &bintree{postgresql9522Json, map[string]*bintree{}},
		"9.6.18.json": &bintree{postgresql9618Json, map[string]*bintree{}},
	}},
	"redis": &bintree{nil, map[string]*bintree{
		"6.0.4.json": &bintree{redis604Json, map[string]*bintree{}},
	}},
	"ruby": &bintree{nil, map[string]*bintree{
		"2.6.6.json": &bintree{ruby266Json, map[string]*bintree{}},
		"2.7.1.json": &bintree{ruby271Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
